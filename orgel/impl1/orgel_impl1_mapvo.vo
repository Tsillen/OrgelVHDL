
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.3.0.109

// ldbanno -n Verilog -o orgel_impl1_mapvo.vo -w -neg -gui orgel_impl1_map.ncd 
// Netlist created on Mon Oct 13 15:31:01 2014
// Netlist written on Mon Oct 13 15:31:19 2014
// Design is for device LCMXO2-7000HE
// Design is for package TQFP144
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module top_layer ( clk, reset, kbclock, kbdata, audio_r, audio_l );
  input  clk, reset, kbclock, kbdata;
  output audio_r, audio_l;
  wire   \Read_key/L_Showkey/cnt_12 , \Read_key/L_Showkey/cnt_11 , 
         \Read_key/L_Showkey/n3263 , \Read_key/L_Showkey/n3264 , 
         \Read_key/L_Showkey/cnt_10 , \Read_key/L_Showkey/cnt_9 , 
         \Read_key/C_scancode_1 , \Read_key/C_scancode_0 , 
         \Read_key/L_Constantkey/byteread_sync2 , clk_c, 
         \Read_key/L_Showkey/n3262 , scancode_sync_0, scancode_sync_1, 
         \Read_key/L_Showkey/cnt_31 , \Read_key/L_Showkey/n4034 , 
         \Read_key/L_Showkey/cnt_3 , \Read_key/L_Showkey/n4031 , 
         \Read_key/L_Showkey/n135 , \Read_key/L_Showkey/n4033 , kbclock_c, 
         \Read_key/L_Showkey/n3251 , \Read_key/L_Showkey/cnt_30 , 
         \Read_key/L_Showkey/cnt_29 , \Read_key/L_Showkey/n136 , 
         \Read_key/L_Showkey/n137 , \Read_key/L_Showkey/n3250 , 
         \Read_key/L_Showkey/cnt_28 , \Read_key/L_Showkey/cnt_27 , 
         \Read_key/L_Showkey/n138 , \Read_key/L_Showkey/n139 , 
         \Read_key/L_Showkey/n3249 , \Read_key/L_Showkey/cnt_8 , 
         \Read_key/L_Showkey/cnt_7 , \Read_key/L_Showkey/n3261 , 
         \Read_key/L_Showkey/cnt_26 , \Read_key/L_Showkey/cnt_25 , 
         \Read_key/L_Showkey/n140 , \Read_key/L_Showkey/n141 , 
         \Read_key/L_Showkey/n3248 , \Read_key/L_Showkey/cnt_24 , 
         \Read_key/L_Showkey/cnt_23 , \Read_key/L_Showkey/n142 , 
         \Read_key/L_Showkey/n143 , \Read_key/L_Showkey/n3247 , 
         \Read_key/L_Showkey/cnt_6 , \Read_key/L_Showkey/cnt_5 , 
         \Read_key/L_Showkey/n3260 , \Read_key/L_Showkey/cnt_4 , 
         \Read_key/L_Showkey/n3259 , \Read_key/L_Showkey/n3273 , 
         \Read_key/L_Showkey/n368 , \Read_key/L_Showkey/cnt_22 , 
         \Read_key/L_Showkey/cnt_21 , \Read_key/L_Showkey/n144 , 
         \Read_key/L_Showkey/n145 , \Read_key/L_Showkey/n3246 , 
         \Read_key/L_Showkey/cnt_0 , \Read_key/L_Showkey/n3718 , 
         \Read_key/L_Showkey/n87 , \Read_key/L_Showkey/n166 , 
         \Read_key/L_Showkey/n3236 , \Read_key/L_Showkey/n158 , 
         \Read_key/L_Showkey/n159 , \Read_key/L_Showkey/n3239 , 
         \Read_key/L_Showkey/n3240 , \Read_key/L_Showkey/cnt_2 , 
         \Read_key/L_Showkey/cnt_1 , \Read_key/L_Showkey/n3272 , 
         \Read_key/L_Showkey/n3271 , \Read_key/L_Showkey/n3270 , 
         \Read_key/L_Showkey/cnt_20 , \Read_key/L_Showkey/cnt_19 , 
         \Read_key/L_Showkey/n146 , \Read_key/L_Showkey/n147 , 
         \Read_key/L_Showkey/n3245 , \Read_key/L_Showkey/cnt_18 , 
         \Read_key/L_Showkey/cnt_17 , \Read_key/L_Showkey/n148 , 
         \Read_key/L_Showkey/n149 , \Read_key/L_Showkey/n3244 , 
         \Read_key/L_Showkey/n3269 , \Read_key/L_Showkey/cnt_16 , 
         \Read_key/L_Showkey/cnt_15 , \Read_key/L_Showkey/n150 , 
         \Read_key/L_Showkey/n151 , \Read_key/L_Showkey/n3243 , 
         \Read_key/L_Showkey/n3268 , \Read_key/L_Showkey/n3267 , 
         \Read_key/L_Showkey/cnt_14 , \Read_key/L_Showkey/cnt_13 , 
         \Read_key/L_Showkey/n152 , \Read_key/L_Showkey/n153 , 
         \Read_key/L_Showkey/n3242 , \Read_key/L_Showkey/n122 , 
         \Read_key/L_Showkey/n164 , \Read_key/L_Showkey/n165 , 
         \Read_key/L_Showkey/n3237 , \Read_key/L_Showkey/n154 , 
         \Read_key/L_Showkey/n155 , \Read_key/L_Showkey/n3241 , 
         \Read_key/L_Showkey/n162 , \Read_key/L_Showkey/n163 , 
         \Read_key/L_Showkey/n3238 , \Read_key/L_Showkey/n3266 , 
         \Read_key/L_Showkey/n3265 , \Read_key/L_Showkey/n160 , 
         \Read_key/L_Showkey/n161 , \Read_key/L_Showkey/n156 , 
         \Read_key/L_Showkey/n157 , \Tone_Gen/Audio_Pulse/cnt_4 , 
         \Tone_Gen/Audio_Pulse/cnt_3 , \Tone_Gen/Audio_Pulse/n67 , 
         \Tone_Gen/Audio_Pulse/n68 , \Tone_Gen/Audio_Pulse/n118 , 
         \Tone_Gen/clk_divider , \Tone_Gen/Audio_Pulse/n3253 , 
         \Tone_Gen/Audio_Pulse/n3254 , \Tone_Gen/Audio_Pulse/cnt_2 , 
         \Tone_Gen/Audio_Pulse/cnt_1 , \Tone_Gen/Audio_Pulse/n69 , 
         \Tone_Gen/Audio_Pulse/n70 , \Tone_Gen/Audio_Pulse/n3252 , 
         \Tone_Gen/Audio_Pulse/cnt_0 , \Tone_Gen/Audio_Pulse/n71 , 
         \Tone_Gen/Audio_Pulse/cnt_12 , \Tone_Gen/Audio_Pulse/cnt_11 , 
         \Tone_Gen/Audio_Pulse/n59 , \Tone_Gen/Audio_Pulse/n60_adj_1 , 
         \Tone_Gen/Audio_Pulse/n3257 , pulselenght_0, 
         \Tone_Gen/Audio_Pulse/pulselenght_1 , 
         \Read_key/L_Showkey/dig1store_7 , \Read_key/L_Showkey/dig1store_6 , 
         \Read_key/L_Showkey/n134 , \Tone_Gen/Audio_Pulse/n3153 , 
         \Read_key/C_scancode_6 , \Tone_Gen/Audio_Pulse/n9 , 
         \Read_key/C_scancode_7 , \Tone_Gen/Audio_Pulse/pulselenght_2 , 
         \Tone_Gen/Audio_Pulse/pulselenght_3 , 
         \Tone_Gen/Audio_Pulse/pulselenght_4 , \Tone_Gen/Audio_Pulse/cnt_5 , 
         \Tone_Gen/Audio_Pulse/pulselenght_5 , 
         \Read_key/L_Showkey/dig1store_5 , \Read_key/L_Showkey/dig1store_4 , 
         \Tone_Gen/Audio_Pulse/n3152 , \Read_key/C_scancode_4 , 
         \Read_key/C_scancode_5 , \Tone_Gen/Audio_Pulse/cnt_10 , 
         \Tone_Gen/Audio_Pulse/cnt_9 , \Tone_Gen/Audio_Pulse/n61 , 
         \Tone_Gen/Audio_Pulse/n62_adj_2 , \Tone_Gen/Audio_Pulse/n3256 , 
         \Tone_Gen/Audio_Pulse/cnt_8 , \Tone_Gen/Audio_Pulse/cnt_7 , 
         \Tone_Gen/Audio_Pulse/n63 , \Tone_Gen/Audio_Pulse/n64 , 
         \Tone_Gen/Audio_Pulse/n3255 , \Tone_Gen/Audio_Pulse/cnt_6 , 
         \Tone_Gen/Audio_Pulse/pulselenght_6 , 
         \Tone_Gen/Audio_Pulse/pulselenght_7 , pulselenght_8, pulselenght_9, 
         \Read_key/L_Showkey/dig1store_3 , \Read_key/L_Showkey/dig1store_2 , 
         \Tone_Gen/Audio_Pulse/n3151 , \Read_key/C_scancode_2 , 
         \Read_key/C_scancode_3 , \Tone_Gen/Audio_Pulse/pulselenght_10 , 
         \Tone_Gen/Audio_Pulse/pulselenght_11 , \Tone_Gen/pulselenght_12 , 
         \Read_key/L_Showkey/dig1store_1 , \Read_key/L_Showkey/dig1store_0 , 
         \Tone_Gen/Audio_Pulse/n65_adj_3 , \Tone_Gen/Audio_Pulse/n66 , 
         \Read_key/L_Showkey/n1715 , \Read_key/L_Showkey/n2072 , 
         \Read_key/C_byte_read , \Read_key/L_Showkey/n3689 , n4062, 
         scancode_sync_6, n10, scancode_sync_7, n49, 
         \Read_key/L_Constantkey/n38 , \Read_key/L_Constantkey/n48 , 
         \Read_key/L_Constantkey/n636 , \Read_key/L_Showkey/n3665 , 
         \Read_key/L_Showkey/n200 , \Tone_Gen/Clock_Generator/counter_0 , 
         \Tone_Gen/Clock_Generator/counter_1 , \Tone_Gen/Clock_Generator/n40 , 
         \Tone_Gen/Clock_Generator/n41 , \Tone_Gen/Clock_Generator/n5 , 
         \Tone_Gen/Clock_Generator/n877 , \Tone_Gen/Clock_Generator/counter_2 , 
         \Tone_Gen/Clock_Generator/counter_3 , \Tone_Gen/Clock_Generator/n38 , 
         \Tone_Gen/Clock_Generator/n39 , \Tone_Gen/Clock_Generator/counter_4 , 
         \Tone_Gen/Clock_Generator/counter_5 , 
         \Tone_Gen/Clock_Generator/n4050 , \Tone_Gen/Clock_Generator/n4061 , 
         \Tone_Gen/Clock_Generator/n36 , \Tone_Gen/Clock_Generator/n37 , 
         \Tone_Gen/Clock_Generator/counter_6 , 
         \Tone_Gen/Clock_Generator/n4038 , \Tone_Gen/Clock_Generator/n35 , 
         \Tone_Gen/Clock_Generator/freqentie_2 , 
         \Tone_Gen/Clock_Generator/freqentie_0 , n396, 
         \Tone_Gen/Clock_Generator/freqentie_1 , 
         \Tone_Gen/Clock_Generator/n398 , \Tone_Gen/Clock_Generator/n3945 , 
         \Tone_Gen/Clock_Generator/n864 , flag, 
         \Tone_Gen/Clock_Generator/n399 , n4350, 
         \Tone_Gen/Clock_Generator/n195 , \Tone_Gen/Clock_Generator/n1528 , 
         \Tone_Gen/Clock_Generator/n870 , \Tone_Gen/Clock_Generator/n687 , 
         \Tone_Gen/Clock_Generator/n6 , \Tone_Gen/Clock_Generator/n160 , 
         \Tone_Gen/Clock_Generator/n871 , \Tone_Gen/Clock_Generator/n4037 , 
         audio_l_c, \Tone_Gen/Audio_Pulse/n54 , \Tone_Gen/Audio_Pulse/n3676 , 
         scancode_sync_4, scancode_sync_5, \Read_key/L_Constantkey/n6 , 
         \Read_key/L_Constantkey/n3683 , n4060, n333, n50, 
         \Read_key/L_Constantkey/n623 , \Read_key/L_Constantkey/n634 , n51, 
         n49_adj_56, \Tone_Gen/Audio_Pulse/n4036 , scancode_sync_2, 
         scancode_sync_3, \Tone_Gen/Audio_Pulse/n3295 , \Tone_Gen/n62_adj_40 , 
         \Read_key/L_Showkey/n6_adj_48 , \Tone_Gen/Audio_Pulse/n3732 , 
         \Read_key/L_Showkey/n4035 , \Read_key/L_Showkey/n39 , n4056, 
         \Tone_Gen/Pulse_Length/n3703 , n3687, n52, n4067, n3904, n4068, 
         \Tone_Gen/Pulse_Length/n55_adj_11 , 
         \Tone_Gen/Pulse_Length/n50_adj_31 , \Tone_Gen/Pulse_Length/n43 , 
         n4066, n4065, \Tone_Gen/n52 , n1861, n4045, n830, n6_adj_54, 
         \Tone_Gen/Pulse_Length/n53_adj_14 , \Tone_Gen/Pulse_Length/n4043 , 
         \Tone_Gen/Pulse_Length/n55 , n4042, n4059, 
         \Tone_Gen/Pulse_Length/n73 , n4063, 
         \Tone_Gen/Pulse_Length/n50_adj_13 , n1825, 
         \Tone_Gen/Pulse_Length/n4348 , n4044, \Tone_Gen/Pulse_Length/n4055 , 
         \Tone_Gen/Pulse_Length/n62 , \Tone_Gen/Pulse_Length/n10 , 
         \Tone_Gen/Pulse_Length/n48_adj_19 , 
         \Tone_Gen/Pulse_Length/n59_adj_26 , \Tone_Gen/Pulse_Length/n4176 , 
         \Tone_Gen/Pulse_Length/n4178 , \Tone_Gen/n37 , n6, n4053, 
         \Tone_Gen/Pulse_Length/n38 , \Tone_Gen/Pulse_Length/n3944 , 
         \Tone_Gen/Clock_Generator/n4057 , \Tone_Gen/Clock_Generator/n701 , 
         \Tone_Gen/Clock_Generator/n3662 , \Tone_Gen/Clock_Generator/n1846 , 
         n1834, \Tone_Gen/Pulse_Length/n4_adj_15 , 
         \Tone_Gen/Pulse_Length/n3668 , n4054, n44, n3691, n4, 
         \Tone_Gen/Pulse_Length/n70 , \Tone_Gen/n76 , n4_adj_57, n1832, 
         \Tone_Gen/Pulse_Length/n72 , \Tone_Gen/Pulse_Length/n85 , 
         \Tone_Gen/Clock_Generator/n3680 , \Tone_Gen/Clock_Generator/n709 , 
         \Read_key/L_Showkey/n40 , \Read_key/L_Showkey/n44 , kbdata_c, 
         \Read_key/L_Showkey/n3696 , \Read_key/L_Showkey/n7_adj_47 , 
         \Read_key/L_Showkey/n24 , \Read_key/L_Showkey/n36 , 
         \Read_key/L_Showkey/n42 , \Read_key/L_Showkey/n28 , 
         \Read_key/L_Showkey/n38 , \Read_key/L_Showkey/n3702 , 
         \Read_key/L_Showkey/n4111 , \Read_key/L_Showkey/n4113 , 
         \Read_key/L_Showkey/n6 , \Read_key/L_Showkey/n4051 , reset_c, 
         \Read_key/L_Showkey/n3690 , \Read_key/L_Showkey/n3765 , 
         \Read_key/L_Showkey/n6_adj_49 , n49_adj_55, \Tone_Gen/n58 , 
         \Tone_Gen/Pulse_Length/n78 , \Tone_Gen/n91 , \Tone_Gen/n65 , 
         \Tone_Gen/n60 , n3905, n4049, \Tone_Gen/Audio_Pulse/n3745 , 
         \Tone_Gen/Audio_Pulse/n3757 , \Tone_Gen/Pulse_Length/n45 , 
         \Read_key/L_Constantkey/byteread_sync1 , \Tone_Gen/n36 , 
         \Tone_Gen/Pulse_Length/n46 , n4052, \Tone_Gen/Audio_Pulse/n3772 , 
         \Tone_Gen/Audio_Pulse/n3721 , n56, \Tone_Gen/Pulse_Length/n65_adj_28 , 
         \Tone_Gen/Pulse_Length/n38_adj_24 , \Tone_Gen/Pulse_Length/n4_adj_17 , 
         n4048, \Tone_Gen/Pulse_Length/n53 , \Tone_Gen/Pulse_Length/n839 , 
         \Tone_Gen/n62 , \Tone_Gen/Audio_Pulse/n861 , 
         \Tone_Gen/Pulse_Length/n49_adj_10 , \Tone_Gen/Pulse_Length/n60 , 
         \Tone_Gen/Pulse_Length/n53_adj_8 , \Tone_Gen/n56 , 
         \Tone_Gen/Clock_Generator/n872 , \Tone_Gen/Clock_Generator/n4039 , 
         \Tone_Gen/Clock_Generator/n3737 , \Tone_Gen/Audio_Pulse/n3751 , 
         \Read_key/L_Showkey/n3698 , \Read_key/L_Showkey/n3699 , 
         \Read_key/L_Showkey/n3701 , VCCI;

  Read_key_L_Showkey_SLICE_0 \Read_key/L_Showkey/SLICE_0 ( 
    .A1(\Read_key/L_Showkey/cnt_12 ), .A0(\Read_key/L_Showkey/cnt_11 ), 
    .FCI(\Read_key/L_Showkey/n3263 ), .FCO(\Read_key/L_Showkey/n3264 ));
  Read_key_SLICE_1 \Read_key/SLICE_1 ( .A1(\Read_key/L_Showkey/cnt_10 ), 
    .A0(\Read_key/L_Showkey/cnt_9 ), .M1(\Read_key/C_scancode_1 ), 
    .M0(\Read_key/C_scancode_0 ), .CE(\Read_key/L_Constantkey/byteread_sync2 ), 
    .CLK(clk_c), .FCI(\Read_key/L_Showkey/n3262 ), .Q0(scancode_sync_0), 
    .Q1(scancode_sync_1), .FCO(\Read_key/L_Showkey/n3263 ));
  Read_key_L_Showkey_SLICE_2 \Read_key/L_Showkey/SLICE_2 ( 
    .D0(\Read_key/L_Showkey/cnt_31 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI0(\Read_key/L_Showkey/n135 ), .LSR(\Read_key/L_Showkey/n4033 ), 
    .CLK(kbclock_c), .FCI(\Read_key/L_Showkey/n3251 ), 
    .F0(\Read_key/L_Showkey/n135 ), .Q0(\Read_key/L_Showkey/cnt_31 ));
  Read_key_L_Showkey_SLICE_3 \Read_key/L_Showkey/SLICE_3 ( 
    .D1(\Read_key/L_Showkey/cnt_30 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_29 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n136 ), .DI0(\Read_key/L_Showkey/n137 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3250 ), .F0(\Read_key/L_Showkey/n137 ), 
    .Q0(\Read_key/L_Showkey/cnt_29 ), .F1(\Read_key/L_Showkey/n136 ), 
    .Q1(\Read_key/L_Showkey/cnt_30 ), .FCO(\Read_key/L_Showkey/n3251 ));
  Read_key_L_Showkey_SLICE_4 \Read_key/L_Showkey/SLICE_4 ( 
    .D1(\Read_key/L_Showkey/cnt_28 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_27 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n138 ), .DI0(\Read_key/L_Showkey/n139 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3249 ), .F0(\Read_key/L_Showkey/n139 ), 
    .Q0(\Read_key/L_Showkey/cnt_27 ), .F1(\Read_key/L_Showkey/n138 ), 
    .Q1(\Read_key/L_Showkey/cnt_28 ), .FCO(\Read_key/L_Showkey/n3250 ));
  Read_key_L_Showkey_SLICE_5 \Read_key/L_Showkey/SLICE_5 ( 
    .A1(\Read_key/L_Showkey/cnt_8 ), .A0(\Read_key/L_Showkey/cnt_7 ), 
    .FCI(\Read_key/L_Showkey/n3261 ), .FCO(\Read_key/L_Showkey/n3262 ));
  Read_key_L_Showkey_SLICE_6 \Read_key/L_Showkey/SLICE_6 ( 
    .D1(\Read_key/L_Showkey/cnt_26 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_25 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n140 ), .DI0(\Read_key/L_Showkey/n141 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3248 ), .F0(\Read_key/L_Showkey/n141 ), 
    .Q0(\Read_key/L_Showkey/cnt_25 ), .F1(\Read_key/L_Showkey/n140 ), 
    .Q1(\Read_key/L_Showkey/cnt_26 ), .FCO(\Read_key/L_Showkey/n3249 ));
  Read_key_L_Showkey_SLICE_7 \Read_key/L_Showkey/SLICE_7 ( 
    .D1(\Read_key/L_Showkey/cnt_24 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_23 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n142 ), .DI0(\Read_key/L_Showkey/n143 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3247 ), .F0(\Read_key/L_Showkey/n143 ), 
    .Q0(\Read_key/L_Showkey/cnt_23 ), .F1(\Read_key/L_Showkey/n142 ), 
    .Q1(\Read_key/L_Showkey/cnt_24 ), .FCO(\Read_key/L_Showkey/n3248 ));
  Read_key_L_Showkey_SLICE_8 \Read_key/L_Showkey/SLICE_8 ( 
    .A1(\Read_key/L_Showkey/cnt_6 ), .A0(\Read_key/L_Showkey/cnt_5 ), 
    .FCI(\Read_key/L_Showkey/n3260 ), .FCO(\Read_key/L_Showkey/n3261 ));
  Read_key_L_Showkey_SLICE_9 \Read_key/L_Showkey/SLICE_9 ( 
    .A1(\Read_key/L_Showkey/cnt_4 ), .A0(\Read_key/L_Showkey/cnt_3 ), 
    .FCI(\Read_key/L_Showkey/n3259 ), .FCO(\Read_key/L_Showkey/n3260 ));
  Read_key_L_Showkey_SLICE_10 \Read_key/L_Showkey/SLICE_10 ( 
    .A0(\Read_key/L_Showkey/cnt_31 ), .FCI(\Read_key/L_Showkey/n3273 ), 
    .F1(\Read_key/L_Showkey/n368 ));
  Read_key_L_Showkey_SLICE_11 \Read_key/L_Showkey/SLICE_11 ( 
    .D1(\Read_key/L_Showkey/cnt_22 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_21 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n144 ), .DI0(\Read_key/L_Showkey/n145 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3246 ), .F0(\Read_key/L_Showkey/n145 ), 
    .Q0(\Read_key/L_Showkey/cnt_21 ), .F1(\Read_key/L_Showkey/n144 ), 
    .Q1(\Read_key/L_Showkey/cnt_22 ), .FCO(\Read_key/L_Showkey/n3247 ));
  Read_key_L_Showkey_SLICE_12 \Read_key/L_Showkey/SLICE_12 ( 
    .D1(\Read_key/L_Showkey/cnt_0 ), .C1(\Read_key/L_Showkey/n3718 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n87 ), 
    .F1(\Read_key/L_Showkey/n166 ), .FCO(\Read_key/L_Showkey/n3236 ));
  Read_key_L_Showkey_SLICE_13 \Read_key/L_Showkey/SLICE_13 ( 
    .D1(\Read_key/L_Showkey/cnt_8 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_7 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n158 ), .DI0(\Read_key/L_Showkey/n159 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3239 ), .F0(\Read_key/L_Showkey/n159 ), 
    .Q0(\Read_key/L_Showkey/cnt_7 ), .F1(\Read_key/L_Showkey/n158 ), 
    .Q1(\Read_key/L_Showkey/cnt_8 ), .FCO(\Read_key/L_Showkey/n3240 ));
  Read_key_L_Showkey_SLICE_14 \Read_key/L_Showkey/SLICE_14 ( 
    .A1(\Read_key/L_Showkey/cnt_2 ), .B0(\Read_key/L_Showkey/cnt_0 ), 
    .A0(\Read_key/L_Showkey/cnt_1 ), .FCO(\Read_key/L_Showkey/n3259 ));
  Read_key_L_Showkey_SLICE_15 \Read_key/L_Showkey/SLICE_15 ( 
    .A1(\Read_key/L_Showkey/cnt_30 ), .A0(\Read_key/L_Showkey/cnt_29 ), 
    .FCI(\Read_key/L_Showkey/n3272 ), .FCO(\Read_key/L_Showkey/n3273 ));
  Read_key_L_Showkey_SLICE_16 \Read_key/L_Showkey/SLICE_16 ( 
    .A1(\Read_key/L_Showkey/cnt_28 ), .A0(\Read_key/L_Showkey/cnt_27 ), 
    .FCI(\Read_key/L_Showkey/n3271 ), .FCO(\Read_key/L_Showkey/n3272 ));
  Read_key_L_Showkey_SLICE_17 \Read_key/L_Showkey/SLICE_17 ( 
    .A1(\Read_key/L_Showkey/cnt_26 ), .A0(\Read_key/L_Showkey/cnt_25 ), 
    .FCI(\Read_key/L_Showkey/n3270 ), .FCO(\Read_key/L_Showkey/n3271 ));
  Read_key_L_Showkey_SLICE_18 \Read_key/L_Showkey/SLICE_18 ( 
    .D1(\Read_key/L_Showkey/cnt_20 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_19 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n146 ), .DI0(\Read_key/L_Showkey/n147 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3245 ), .F0(\Read_key/L_Showkey/n147 ), 
    .Q0(\Read_key/L_Showkey/cnt_19 ), .F1(\Read_key/L_Showkey/n146 ), 
    .Q1(\Read_key/L_Showkey/cnt_20 ), .FCO(\Read_key/L_Showkey/n3246 ));
  Read_key_L_Showkey_SLICE_19 \Read_key/L_Showkey/SLICE_19 ( 
    .D1(\Read_key/L_Showkey/cnt_18 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_17 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n148 ), .DI0(\Read_key/L_Showkey/n149 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3244 ), .F0(\Read_key/L_Showkey/n149 ), 
    .Q0(\Read_key/L_Showkey/cnt_17 ), .F1(\Read_key/L_Showkey/n148 ), 
    .Q1(\Read_key/L_Showkey/cnt_18 ), .FCO(\Read_key/L_Showkey/n3245 ));
  Read_key_L_Showkey_SLICE_20 \Read_key/L_Showkey/SLICE_20 ( 
    .A1(\Read_key/L_Showkey/cnt_24 ), .A0(\Read_key/L_Showkey/cnt_23 ), 
    .FCI(\Read_key/L_Showkey/n3269 ), .FCO(\Read_key/L_Showkey/n3270 ));
  Read_key_L_Showkey_SLICE_21 \Read_key/L_Showkey/SLICE_21 ( 
    .D1(\Read_key/L_Showkey/cnt_16 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_15 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n150 ), .DI0(\Read_key/L_Showkey/n151 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3243 ), .F0(\Read_key/L_Showkey/n151 ), 
    .Q0(\Read_key/L_Showkey/cnt_15 ), .F1(\Read_key/L_Showkey/n150 ), 
    .Q1(\Read_key/L_Showkey/cnt_16 ), .FCO(\Read_key/L_Showkey/n3244 ));
  Read_key_L_Showkey_SLICE_22 \Read_key/L_Showkey/SLICE_22 ( 
    .A1(\Read_key/L_Showkey/cnt_22 ), .A0(\Read_key/L_Showkey/cnt_21 ), 
    .FCI(\Read_key/L_Showkey/n3268 ), .FCO(\Read_key/L_Showkey/n3269 ));
  Read_key_L_Showkey_SLICE_23 \Read_key/L_Showkey/SLICE_23 ( 
    .A1(\Read_key/L_Showkey/cnt_20 ), .A0(\Read_key/L_Showkey/cnt_19 ), 
    .FCI(\Read_key/L_Showkey/n3267 ), .FCO(\Read_key/L_Showkey/n3268 ));
  Read_key_L_Showkey_SLICE_24 \Read_key/L_Showkey/SLICE_24 ( 
    .D1(\Read_key/L_Showkey/cnt_14 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_13 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n152 ), .DI0(\Read_key/L_Showkey/n153 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3242 ), .F0(\Read_key/L_Showkey/n153 ), 
    .Q0(\Read_key/L_Showkey/cnt_13 ), .F1(\Read_key/L_Showkey/n152 ), 
    .Q1(\Read_key/L_Showkey/cnt_14 ), .FCO(\Read_key/L_Showkey/n3243 ));
  Read_key_L_Showkey_SLICE_25 \Read_key/L_Showkey/SLICE_25 ( 
    .D1(\Read_key/L_Showkey/cnt_2 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_1 ), .C0(\Read_key/L_Showkey/cnt_0 ), 
    .B0(\Read_key/L_Showkey/n368 ), .A0(\Read_key/L_Showkey/n122 ), 
    .DI1(\Read_key/L_Showkey/n164 ), .DI0(\Read_key/L_Showkey/n165 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3236 ), .F0(\Read_key/L_Showkey/n165 ), 
    .Q0(\Read_key/L_Showkey/cnt_1 ), .F1(\Read_key/L_Showkey/n164 ), 
    .Q1(\Read_key/L_Showkey/cnt_2 ), .FCO(\Read_key/L_Showkey/n3237 ));
  Read_key_L_Showkey_SLICE_26 \Read_key/L_Showkey/SLICE_26 ( 
    .D1(\Read_key/L_Showkey/cnt_12 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_11 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n154 ), .DI0(\Read_key/L_Showkey/n155 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3241 ), .F0(\Read_key/L_Showkey/n155 ), 
    .Q0(\Read_key/L_Showkey/cnt_11 ), .F1(\Read_key/L_Showkey/n154 ), 
    .Q1(\Read_key/L_Showkey/cnt_12 ), .FCO(\Read_key/L_Showkey/n3242 ));
  Read_key_L_Showkey_SLICE_27 \Read_key/L_Showkey/SLICE_27 ( 
    .D1(\Read_key/L_Showkey/cnt_4 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_3 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_1 ), .A0(\Read_key/L_Showkey/n368 ), 
    .DI1(\Read_key/L_Showkey/n162 ), .DI0(\Read_key/L_Showkey/n163 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3237 ), .F0(\Read_key/L_Showkey/n163 ), 
    .Q0(\Read_key/L_Showkey/cnt_3 ), .F1(\Read_key/L_Showkey/n162 ), 
    .Q1(\Read_key/L_Showkey/cnt_4 ), .FCO(\Read_key/L_Showkey/n3238 ));
  Read_key_L_Showkey_SLICE_28 \Read_key/L_Showkey/SLICE_28 ( 
    .A1(\Read_key/L_Showkey/cnt_18 ), .A0(\Read_key/L_Showkey/cnt_17 ), 
    .FCI(\Read_key/L_Showkey/n3266 ), .FCO(\Read_key/L_Showkey/n3267 ));
  Read_key_L_Showkey_SLICE_29 \Read_key/L_Showkey/SLICE_29 ( 
    .A1(\Read_key/L_Showkey/cnt_16 ), .A0(\Read_key/L_Showkey/cnt_15 ), 
    .FCI(\Read_key/L_Showkey/n3265 ), .FCO(\Read_key/L_Showkey/n3266 ));
  Read_key_L_Showkey_SLICE_30 \Read_key/L_Showkey/SLICE_30 ( 
    .D1(\Read_key/L_Showkey/cnt_6 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_5 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n160 ), .DI0(\Read_key/L_Showkey/n161 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3238 ), .F0(\Read_key/L_Showkey/n161 ), 
    .Q0(\Read_key/L_Showkey/cnt_5 ), .F1(\Read_key/L_Showkey/n160 ), 
    .Q1(\Read_key/L_Showkey/cnt_6 ), .FCO(\Read_key/L_Showkey/n3239 ));
  Read_key_L_Showkey_SLICE_31 \Read_key/L_Showkey/SLICE_31 ( 
    .D1(\Read_key/L_Showkey/cnt_10 ), .C1(\Read_key/L_Showkey/n4034 ), 
    .B1(\Read_key/L_Showkey/cnt_3 ), .A1(\Read_key/L_Showkey/n4031 ), 
    .D0(\Read_key/L_Showkey/cnt_9 ), .C0(\Read_key/L_Showkey/n4034 ), 
    .B0(\Read_key/L_Showkey/cnt_3 ), .A0(\Read_key/L_Showkey/n4031 ), 
    .DI1(\Read_key/L_Showkey/n156 ), .DI0(\Read_key/L_Showkey/n157 ), 
    .LSR(\Read_key/L_Showkey/n4033 ), .CLK(kbclock_c), 
    .FCI(\Read_key/L_Showkey/n3240 ), .F0(\Read_key/L_Showkey/n157 ), 
    .Q0(\Read_key/L_Showkey/cnt_9 ), .F1(\Read_key/L_Showkey/n156 ), 
    .Q1(\Read_key/L_Showkey/cnt_10 ), .FCO(\Read_key/L_Showkey/n3241 ));
  Read_key_L_Showkey_SLICE_32 \Read_key/L_Showkey/SLICE_32 ( 
    .A1(\Read_key/L_Showkey/cnt_14 ), .A0(\Read_key/L_Showkey/cnt_13 ), 
    .FCI(\Read_key/L_Showkey/n3264 ), .FCO(\Read_key/L_Showkey/n3265 ));
  Tone_Gen_Audio_Pulse_SLICE_33 \Tone_Gen/Audio_Pulse/SLICE_33 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_4 ), .A0(\Tone_Gen/Audio_Pulse/cnt_3 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n67 ), .DI0(\Tone_Gen/Audio_Pulse/n68 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3253 ), .F0(\Tone_Gen/Audio_Pulse/n68 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_3 ), .F1(\Tone_Gen/Audio_Pulse/n67 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_4 ), .FCO(\Tone_Gen/Audio_Pulse/n3254 ));
  Tone_Gen_Audio_Pulse_SLICE_34 \Tone_Gen/Audio_Pulse/SLICE_34 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_2 ), .A0(\Tone_Gen/Audio_Pulse/cnt_1 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n69 ), .DI0(\Tone_Gen/Audio_Pulse/n70 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3252 ), .F0(\Tone_Gen/Audio_Pulse/n70 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_1 ), .F1(\Tone_Gen/Audio_Pulse/n69 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_2 ), .FCO(\Tone_Gen/Audio_Pulse/n3253 ));
  Tone_Gen_Audio_Pulse_SLICE_35 \Tone_Gen/Audio_Pulse/SLICE_35 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_0 ), .DI1(\Tone_Gen/Audio_Pulse/n71 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .F1(\Tone_Gen/Audio_Pulse/n71 ), .Q1(\Tone_Gen/Audio_Pulse/cnt_0 ), 
    .FCO(\Tone_Gen/Audio_Pulse/n3252 ));
  Tone_Gen_Audio_Pulse_SLICE_36 \Tone_Gen/Audio_Pulse/SLICE_36 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_12 ), .A0(\Tone_Gen/Audio_Pulse/cnt_11 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n59 ), .DI0(\Tone_Gen/Audio_Pulse/n60_adj_1 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3257 ), .F0(\Tone_Gen/Audio_Pulse/n60_adj_1 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_11 ), .F1(\Tone_Gen/Audio_Pulse/n59 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_12 ));
  SLICE_37 SLICE_37( .D0(\Tone_Gen/Audio_Pulse/cnt_0 ), .C0(pulselenght_0), 
    .B0(\Tone_Gen/Audio_Pulse/cnt_1 ), 
    .A0(\Tone_Gen/Audio_Pulse/pulselenght_1 ), 
    .M1(\Read_key/L_Showkey/dig1store_7 ), 
    .M0(\Read_key/L_Showkey/dig1store_6 ), .CE(\Read_key/L_Showkey/n134 ), 
    .CLK(kbclock_c), .FCI(\Tone_Gen/Audio_Pulse/n3153 ), 
    .Q0(\Read_key/C_scancode_6 ), .F1(\Tone_Gen/Audio_Pulse/n9 ), 
    .Q1(\Read_key/C_scancode_7 ));
  SLICE_38 SLICE_38( .D1(\Tone_Gen/Audio_Pulse/cnt_2 ), 
    .C1(\Tone_Gen/Audio_Pulse/pulselenght_2 ), 
    .B1(\Tone_Gen/Audio_Pulse/cnt_3 ), 
    .A1(\Tone_Gen/Audio_Pulse/pulselenght_3 ), 
    .D0(\Tone_Gen/Audio_Pulse/cnt_4 ), 
    .C0(\Tone_Gen/Audio_Pulse/pulselenght_4 ), 
    .B0(\Tone_Gen/Audio_Pulse/cnt_5 ), 
    .A0(\Tone_Gen/Audio_Pulse/pulselenght_5 ), 
    .M1(\Read_key/L_Showkey/dig1store_5 ), 
    .M0(\Read_key/L_Showkey/dig1store_4 ), .CE(\Read_key/L_Showkey/n134 ), 
    .CLK(kbclock_c), .FCI(\Tone_Gen/Audio_Pulse/n3152 ), 
    .Q0(\Read_key/C_scancode_4 ), .Q1(\Read_key/C_scancode_5 ), 
    .FCO(\Tone_Gen/Audio_Pulse/n3153 ));
  Tone_Gen_Audio_Pulse_SLICE_39 \Tone_Gen/Audio_Pulse/SLICE_39 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_10 ), .A0(\Tone_Gen/Audio_Pulse/cnt_9 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n61 ), .DI0(\Tone_Gen/Audio_Pulse/n62_adj_2 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3256 ), .F0(\Tone_Gen/Audio_Pulse/n62_adj_2 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_9 ), .F1(\Tone_Gen/Audio_Pulse/n61 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_10 ), .FCO(\Tone_Gen/Audio_Pulse/n3257 ));
  Tone_Gen_Audio_Pulse_SLICE_40 \Tone_Gen/Audio_Pulse/SLICE_40 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_8 ), .A0(\Tone_Gen/Audio_Pulse/cnt_7 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n63 ), .DI0(\Tone_Gen/Audio_Pulse/n64 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3255 ), .F0(\Tone_Gen/Audio_Pulse/n64 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_7 ), .F1(\Tone_Gen/Audio_Pulse/n63 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_8 ), .FCO(\Tone_Gen/Audio_Pulse/n3256 ));
  SLICE_41 SLICE_41( .D1(\Tone_Gen/Audio_Pulse/cnt_6 ), 
    .C1(\Tone_Gen/Audio_Pulse/pulselenght_6 ), 
    .B1(\Tone_Gen/Audio_Pulse/cnt_7 ), 
    .A1(\Tone_Gen/Audio_Pulse/pulselenght_7 ), 
    .D0(\Tone_Gen/Audio_Pulse/cnt_8 ), .C0(pulselenght_8), 
    .B0(\Tone_Gen/Audio_Pulse/cnt_9 ), .A0(pulselenght_9), 
    .M1(\Read_key/L_Showkey/dig1store_3 ), 
    .M0(\Read_key/L_Showkey/dig1store_2 ), .CE(\Read_key/L_Showkey/n134 ), 
    .CLK(kbclock_c), .FCI(\Tone_Gen/Audio_Pulse/n3151 ), 
    .Q0(\Read_key/C_scancode_2 ), .Q1(\Read_key/C_scancode_3 ), 
    .FCO(\Tone_Gen/Audio_Pulse/n3152 ));
  SLICE_42 SLICE_42( .D1(\Tone_Gen/Audio_Pulse/cnt_10 ), 
    .C1(\Tone_Gen/Audio_Pulse/pulselenght_10 ), 
    .B1(\Tone_Gen/Audio_Pulse/cnt_11 ), 
    .A1(\Tone_Gen/Audio_Pulse/pulselenght_11 ), 
    .B0(\Tone_Gen/Audio_Pulse/cnt_12 ), .A0(\Tone_Gen/pulselenght_12 ), 
    .M1(\Read_key/L_Showkey/dig1store_1 ), 
    .M0(\Read_key/L_Showkey/dig1store_0 ), .CE(\Read_key/L_Showkey/n134 ), 
    .CLK(kbclock_c), .Q0(\Read_key/C_scancode_0 ), 
    .Q1(\Read_key/C_scancode_1 ), .FCO(\Tone_Gen/Audio_Pulse/n3151 ));
  Tone_Gen_Audio_Pulse_SLICE_43 \Tone_Gen/Audio_Pulse/SLICE_43 ( 
    .A1(\Tone_Gen/Audio_Pulse/cnt_6 ), .A0(\Tone_Gen/Audio_Pulse/cnt_5 ), 
    .DI1(\Tone_Gen/Audio_Pulse/n65_adj_3 ), .DI0(\Tone_Gen/Audio_Pulse/n66 ), 
    .LSR(\Tone_Gen/Audio_Pulse/n118 ), .CLK(\Tone_Gen/clk_divider ), 
    .FCI(\Tone_Gen/Audio_Pulse/n3254 ), .F0(\Tone_Gen/Audio_Pulse/n66 ), 
    .Q0(\Tone_Gen/Audio_Pulse/cnt_5 ), .F1(\Tone_Gen/Audio_Pulse/n65_adj_3 ), 
    .Q1(\Tone_Gen/Audio_Pulse/cnt_6 ), .FCO(\Tone_Gen/Audio_Pulse/n3255 ));
  Read_key_L_Showkey_SLICE_44 \Read_key/L_Showkey/SLICE_44 ( 
    .D1(\Read_key/L_Showkey/cnt_2 ), .C1(\Read_key/L_Showkey/cnt_1 ), 
    .B1(\Read_key/L_Showkey/n368 ), .A1(\Read_key/L_Showkey/cnt_0 ), 
    .D0(\Read_key/L_Showkey/n368 ), .C0(\Read_key/L_Showkey/cnt_3 ), 
    .B0(\Read_key/L_Showkey/cnt_1 ), .A0(\Read_key/L_Showkey/n4034 ), 
    .DI0(\Read_key/L_Showkey/n1715 ), .CE(\Read_key/L_Showkey/n2072 ), 
    .CLK(kbclock_c), .F0(\Read_key/L_Showkey/n1715 ), 
    .Q0(\Read_key/C_byte_read ), .F1(\Read_key/L_Showkey/n3689 ));
  Read_key_L_Constantkey_SLICE_50 \Read_key/L_Constantkey/SLICE_50 ( 
    .D1(n4062), .C1(scancode_sync_6), .B1(n10), .A1(scancode_sync_7), .D0(n49), 
    .C0(\Read_key/L_Constantkey/byteread_sync2 ), 
    .B0(\Read_key/L_Constantkey/n38 ), .A0(\Read_key/L_Constantkey/n48 ), 
    .DI0(\Read_key/L_Constantkey/n636 ), .CLK(clk_c), 
    .F0(\Read_key/L_Constantkey/n636 ), .Q0(\Read_key/L_Constantkey/n48 ), 
    .F1(\Read_key/L_Constantkey/n38 ));
  Read_key_L_Showkey_SLICE_51 \Read_key/L_Showkey/SLICE_51 ( 
    .C1(\Read_key/L_Showkey/cnt_0 ), .B1(\Read_key/L_Showkey/n3665 ), 
    .A1(\Read_key/L_Showkey/cnt_2 ), .D0(\Read_key/L_Showkey/n166 ), 
    .C0(\Read_key/L_Showkey/cnt_3 ), .B0(\Read_key/L_Showkey/cnt_1 ), 
    .A0(\Read_key/L_Showkey/n4034 ), .DI0(\Read_key/L_Showkey/n200 ), 
    .CLK(kbclock_c), .F0(\Read_key/L_Showkey/n200 ), 
    .Q0(\Read_key/L_Showkey/cnt_0 ), .F1(\Read_key/L_Showkey/n4034 ));
  Tone_Gen_Clock_Generator_SLICE_60 \Tone_Gen/Clock_Generator/SLICE_60 ( 
    .B1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_0 ), 
    .DI1(\Tone_Gen/Clock_Generator/n40 ), .DI0(\Tone_Gen/Clock_Generator/n41 ), 
    .CE(\Tone_Gen/Clock_Generator/n5 ), .LSR(\Tone_Gen/Clock_Generator/n877 ), 
    .CLK(clk_c), .F0(\Tone_Gen/Clock_Generator/n41 ), 
    .Q0(\Tone_Gen/Clock_Generator/counter_0 ), 
    .F1(\Tone_Gen/Clock_Generator/n40 ), 
    .Q1(\Tone_Gen/Clock_Generator/counter_1 ));
  Tone_Gen_Clock_Generator_SLICE_61 \Tone_Gen/Clock_Generator/SLICE_61 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_2 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .C0(\Tone_Gen/Clock_Generator/counter_2 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_0 ), 
    .DI1(\Tone_Gen/Clock_Generator/n38 ), .DI0(\Tone_Gen/Clock_Generator/n39 ), 
    .CE(\Tone_Gen/Clock_Generator/n5 ), .LSR(\Tone_Gen/Clock_Generator/n877 ), 
    .CLK(clk_c), .F0(\Tone_Gen/Clock_Generator/n39 ), 
    .Q0(\Tone_Gen/Clock_Generator/counter_2 ), 
    .F1(\Tone_Gen/Clock_Generator/n38 ), 
    .Q1(\Tone_Gen/Clock_Generator/counter_3 ));
  Tone_Gen_Clock_Generator_SLICE_62 \Tone_Gen/Clock_Generator/SLICE_62 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_4 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_5 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .A1(\Tone_Gen/Clock_Generator/n4050 ), 
    .D0(\Tone_Gen/Clock_Generator/counter_3 ), 
    .C0(\Tone_Gen/Clock_Generator/counter_4 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_2 ), 
    .A0(\Tone_Gen/Clock_Generator/n4061 ), 
    .DI1(\Tone_Gen/Clock_Generator/n36 ), .DI0(\Tone_Gen/Clock_Generator/n37 ), 
    .CE(\Tone_Gen/Clock_Generator/n5 ), .LSR(\Tone_Gen/Clock_Generator/n877 ), 
    .CLK(clk_c), .F0(\Tone_Gen/Clock_Generator/n37 ), 
    .Q0(\Tone_Gen/Clock_Generator/counter_4 ), 
    .F1(\Tone_Gen/Clock_Generator/n36 ), 
    .Q1(\Tone_Gen/Clock_Generator/counter_5 ));
  Tone_Gen_Clock_Generator_SLICE_63 \Tone_Gen/Clock_Generator/SLICE_63 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_2 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .D0(\Tone_Gen/Clock_Generator/counter_6 ), 
    .C0(\Tone_Gen/Clock_Generator/counter_5 ), 
    .B0(\Tone_Gen/Clock_Generator/n4038 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_4 ), 
    .DI0(\Tone_Gen/Clock_Generator/n35 ), .CE(\Tone_Gen/Clock_Generator/n5 ), 
    .LSR(\Tone_Gen/Clock_Generator/n877 ), .CLK(clk_c), 
    .F0(\Tone_Gen/Clock_Generator/n35 ), 
    .Q0(\Tone_Gen/Clock_Generator/counter_6 ), 
    .F1(\Tone_Gen/Clock_Generator/n4038 ));
  Tone_Gen_Clock_Generator_SLICE_64 \Tone_Gen/Clock_Generator/SLICE_64 ( 
    .D1(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .C1(\Tone_Gen/Clock_Generator/freqentie_0 ), .B1(n396), 
    .A1(\Tone_Gen/Clock_Generator/freqentie_1 ), .D0(n396), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .B0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .A0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .DI1(\Tone_Gen/Clock_Generator/n398 ), 
    .DI0(\Tone_Gen/Clock_Generator/n3945 ), 
    .CE(\Tone_Gen/Clock_Generator/n864 ), .CLK(clk_c), 
    .F0(\Tone_Gen/Clock_Generator/n3945 ), 
    .Q0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .F1(\Tone_Gen/Clock_Generator/n398 ), 
    .Q1(\Tone_Gen/Clock_Generator/freqentie_1 ));
  SLICE_65 SLICE_65( .C1(flag), .B1(n49), .A1(scancode_sync_1), .D0(n396), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .B0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .A0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .DI0(\Tone_Gen/Clock_Generator/n399 ), 
    .CE(\Tone_Gen/Clock_Generator/n864 ), .CLK(clk_c), 
    .F0(\Tone_Gen/Clock_Generator/n399 ), 
    .Q0(\Tone_Gen/Clock_Generator/freqentie_2 ), .F1(n396));
  SLICE_66 SLICE_66( .DI0(n4350), .LSR(\Tone_Gen/Clock_Generator/n195 ), 
    .CLK(\Tone_Gen/Clock_Generator/n1528 ), .F0(n4350), 
    .Q0(\Tone_Gen/Clock_Generator/n870 ));
  Tone_Gen_Clock_Generator_SLICE_67 \Tone_Gen/Clock_Generator/SLICE_67 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_4 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_2 ), 
    .A1(\Tone_Gen/Clock_Generator/n4061 ), 
    .D0(\Tone_Gen/Clock_Generator/n687 ), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .B0(\Tone_Gen/Clock_Generator/n6 ), .A0(\Tone_Gen/clk_divider ), 
    .DI0(\Tone_Gen/Clock_Generator/n160 ), 
    .LSR(\Tone_Gen/Clock_Generator/n1528 ), .CLK(clk_c), 
    .F0(\Tone_Gen/Clock_Generator/n160 ), .Q0(\Tone_Gen/Clock_Generator/n871 ), 
    .F1(\Tone_Gen/Clock_Generator/n4037 ));
  Tone_Gen_Audio_Pulse_SLICE_69 \Tone_Gen/Audio_Pulse/SLICE_69 ( 
    .B0(\Tone_Gen/Audio_Pulse/n9 ), .A0(audio_l_c), 
    .DI0(\Tone_Gen/Audio_Pulse/n54 ), .LSR(\Tone_Gen/Audio_Pulse/n3676 ), 
    .CLK(\Tone_Gen/clk_divider ), .F0(\Tone_Gen/Audio_Pulse/n54 ), 
    .Q0(audio_l_c));
  SLICE_70 SLICE_70( .C1(scancode_sync_4), .B1(n49), .A1(scancode_sync_5), 
    .D0(\Read_key/L_Constantkey/n6 ), .C0(\Read_key/L_Constantkey/n3683 ), 
    .B0(n4060), .A0(scancode_sync_7), .DI0(n333), .CLK(clk_c), .F0(n333), 
    .Q0(flag), .F1(\Read_key/L_Constantkey/n6 ));
  Read_key_L_Constantkey_SLICE_71 \Read_key/L_Constantkey/SLICE_71 ( 
    .C1(\Read_key/L_Constantkey/n48 ), .B1(n50), 
    .A1(\Read_key/L_Constantkey/byteread_sync2 ), .D0(n50), 
    .C0(\Read_key/L_Constantkey/n38 ), 
    .B0(\Read_key/L_Constantkey/byteread_sync2 ), .A0(n49), 
    .DI1(\Read_key/L_Constantkey/n623 ), .DI0(\Read_key/L_Constantkey/n634 ), 
    .CLK(clk_c), .F0(\Read_key/L_Constantkey/n634 ), .Q0(n49), 
    .F1(\Read_key/L_Constantkey/n623 ), .Q1(n50));
  SLICE_73 SLICE_73( .B0(n51), .A0(n49_adj_56), .M1(\Read_key/C_scancode_3 ), 
    .M0(\Read_key/C_scancode_2 ), .CE(\Read_key/L_Constantkey/byteread_sync2 ), 
    .CLK(clk_c), .F0(\Tone_Gen/Audio_Pulse/n4036 ), .Q0(scancode_sync_2), 
    .Q1(scancode_sync_3));
  SLICE_74 SLICE_74( .B1(\Tone_Gen/Audio_Pulse/n3295 ), 
    .A1(\Tone_Gen/n62_adj_40 ), .B0(\Read_key/L_Showkey/cnt_23 ), 
    .A0(\Read_key/L_Showkey/cnt_31 ), .M1(\Read_key/C_scancode_5 ), 
    .M0(\Read_key/C_scancode_4 ), .CE(\Read_key/L_Constantkey/byteread_sync2 ), 
    .CLK(clk_c), .F0(\Read_key/L_Showkey/n6_adj_48 ), .Q0(scancode_sync_4), 
    .F1(\Tone_Gen/Audio_Pulse/n3732 ), .Q1(scancode_sync_5));
  Read_key_SLICE_75 \Read_key/SLICE_75 ( .D1(\Read_key/L_Showkey/cnt_1 ), 
    .C1(\Read_key/L_Showkey/cnt_3 ), .B1(\Read_key/L_Showkey/n4035 ), 
    .A1(\Read_key/L_Showkey/cnt_0 ), .D0(\Read_key/L_Showkey/cnt_11 ), 
    .C0(\Read_key/L_Showkey/cnt_20 ), .B0(\Read_key/L_Showkey/cnt_30 ), 
    .A0(\Read_key/L_Showkey/cnt_4 ), .M1(\Read_key/C_scancode_7 ), 
    .M0(\Read_key/C_scancode_6 ), .CE(\Read_key/L_Constantkey/byteread_sync2 ), 
    .CLK(clk_c), .F0(\Read_key/L_Showkey/n39 ), .Q0(scancode_sync_6), 
    .F1(\Read_key/L_Showkey/n4033 ), .Q1(scancode_sync_7));
  Tone_Gen_Pulse_Length_i3462_SLICE_76 \Tone_Gen/Pulse_Length/i3462/SLICE_76 
    ( .D1(scancode_sync_0), .C1(scancode_sync_3), .B1(n49), .A1(n4056), 
    .D0(scancode_sync_0), .C0(scancode_sync_3), .B0(n49), .A0(n4056), 
    .M0(scancode_sync_2), .OFX0(\Tone_Gen/Pulse_Length/n3703 ));
  Tone_Gen_Pulse_Length_i82_SLICE_77 \Tone_Gen/Pulse_Length/i82/SLICE_77 ( 
    .D1(n4056), .C1(n3687), .B1(n52), .A1(n4067), .D0(scancode_sync_1), 
    .C0(n3904), .B0(n49), .A0(scancode_sync_2), .M0(n4068), 
    .OFX0(\Tone_Gen/Pulse_Length/n55_adj_11 ));
  Tone_Gen_Pulse_Length_i75_SLICE_78 \Tone_Gen/Pulse_Length/i75/SLICE_78 ( 
    .C1(\Tone_Gen/Pulse_Length/n3703 ), .B1(n4067), .A1(n4068), .D0(n4068), 
    .C0(\Tone_Gen/Pulse_Length/n50_adj_31 ), .B0(\Tone_Gen/Pulse_Length/n43 ), 
    .A0(n4066), .M0(n4065), .OFX0(\Tone_Gen/n52 ));
  Tone_Gen_Pulse_Length_i77_SLICE_79 \Tone_Gen/Pulse_Length/i77/SLICE_79 ( 
    .D1(n1861), .C1(n4045), .B1(n4065), .A1(n4067), .D0(n4067), .C0(n830), 
    .B0(n6_adj_54), .A0(n4068), .M0(n4060), 
    .OFX0(\Tone_Gen/Pulse_Length/n53_adj_14 ));
  Tone_Gen_Pulse_Length_i101_SLICE_80 \Tone_Gen/Pulse_Length/i101/SLICE_80 ( 
    .C1(\Tone_Gen/Pulse_Length/n4043 ), .B1(\Tone_Gen/Pulse_Length/n55 ), 
    .A1(n4068), .D0(n4042), .C0(n4065), .B0(n4059), .A0(n4068), .M0(n4066), 
    .OFX0(\Tone_Gen/Pulse_Length/n73 ));
  Tone_Gen_Pulse_Length_i75_adj_26_SLICE_81 
    \Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81 ( .D1(n4066), 
    .C1(scancode_sync_1), .B1(n4060), .A1(scancode_sync_0), 
    .D0(scancode_sync_0), .C0(n4063), .B0(n49), .A0(scancode_sync_2), 
    .M0(n4056), .OFX0(\Tone_Gen/Pulse_Length/n50_adj_13 ));
  Tone_Gen_Pulse_Length_i3607_SLICE_82 \Tone_Gen/Pulse_Length/i3607/SLICE_82 
    ( .D1(n1825), .C1(scancode_sync_0), .B1(scancode_sync_3), .A1(n49), 
    .D0(scancode_sync_0), .C0(scancode_sync_3), .B0(scancode_sync_5), .A0(n49), 
    .M0(n4068), .OFX0(\Tone_Gen/Pulse_Length/n4348 ));
  Tone_Gen_Pulse_Length_i83_SLICE_83 \Tone_Gen/Pulse_Length/i83/SLICE_83 ( 
    .D1(n4065), .C1(scancode_sync_0), .B1(n4067), .A1(n4060), .D0(n4044), 
    .C0(n4067), .B0(\Tone_Gen/Pulse_Length/n4055 ), .A0(n4060), .M0(n4056), 
    .OFX0(\Tone_Gen/Pulse_Length/n62 ));
  Tone_Gen_Pulse_Length_i70_SLICE_84 \Tone_Gen/Pulse_Length/i70/SLICE_84 ( 
    .D1(scancode_sync_0), .C1(n1825), .B1(n49), .A1(scancode_sync_1), 
    .D0(n4067), .C0(\Tone_Gen/Pulse_Length/n10 ), .B0(n4065), .A0(n4059), 
    .M0(n4068), .OFX0(\Tone_Gen/Pulse_Length/n48_adj_19 ));
  Tone_Gen_Pulse_Length_i84_SLICE_85 \Tone_Gen/Pulse_Length/i84/SLICE_85 ( 
    .D1(n4067), .C1(n4056), .B1(n4059), .A1(n4065), .D0(n4067), .C0(n4056), 
    .B0(n4059), .A0(n4065), .M0(n4060), 
    .OFX0(\Tone_Gen/Pulse_Length/n59_adj_26 ));
  Tone_Gen_Pulse_Length_i3518_SLICE_86 \Tone_Gen/Pulse_Length/i3518/SLICE_86 
    ( .D1(n4056), .C1(n4060), .B1(n4068), .A1(n4059), .B0(scancode_sync_0), 
    .A0(\Tone_Gen/Pulse_Length/n4176 ), .M0(n4067), 
    .OFX0(\Tone_Gen/Pulse_Length/n4178 ));
  Tone_Gen_Pulse_Length_i50_SLICE_87 \Tone_Gen/Pulse_Length/i50/SLICE_87 ( 
    .D1(n1825), .C1(scancode_sync_0), .B1(scancode_sync_3), .A1(n49), 
    .D0(n4060), .C0(n4056), .B0(n4059), .A0(n4067), .M0(n4065), 
    .OFX0(\Tone_Gen/n37 ));
  Tone_Gen_Pulse_Length_i49_SLICE_88 \Tone_Gen/Pulse_Length/i49/SLICE_88 ( 
    .D1(n4068), .C1(n6), .B1(n49), .A1(scancode_sync_2), .D0(n4060), 
    .C0(n4053), .B0(n4066), .A0(n4065), .M0(n4056), 
    .OFX0(\Tone_Gen/Pulse_Length/n38 ));
  Tone_Gen_Pulse_Length_i3425_SLICE_89 \Tone_Gen/Pulse_Length/i3425/SLICE_89 
    ( .D1(scancode_sync_3), .C1(scancode_sync_1), .B1(n49), 
    .A1(scancode_sync_2), .C0(scancode_sync_1), .B0(n49), .A0(scancode_sync_2), 
    .M0(n4056), .OFX0(\Tone_Gen/Pulse_Length/n3944 ));
  Tone_Gen_Clock_Generator_Mux_56_i6_SLICE_90 
    \Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90 ( 
    .D1(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .C1(\Tone_Gen/Clock_Generator/n4037 ), .B1(\Tone_Gen/clk_divider ), 
    .A1(\Tone_Gen/Clock_Generator/n4057 ), .D0(\Tone_Gen/clk_divider ), 
    .C0(\Tone_Gen/Clock_Generator/n701 ), 
    .B0(\Tone_Gen/Clock_Generator/n4057 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_4 ), 
    .M0(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .OFX0(\Tone_Gen/Clock_Generator/n6 ));
  Tone_Gen_Clock_Generator_i51_SLICE_91 
    \Tone_Gen/Clock_Generator/i51/SLICE_91 ( 
    .D1(\Tone_Gen/Clock_Generator/n4057 ), 
    .C1(\Tone_Gen/Clock_Generator/n4038 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_4 ), 
    .A1(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .D0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .C0(\Tone_Gen/Clock_Generator/n3662 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_0 ), 
    .M0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .OFX0(\Tone_Gen/Clock_Generator/n1846 ));
  Tone_Gen_Pulse_Length_SLICE_92 \Tone_Gen/Pulse_Length/SLICE_92 ( .D1(n49), 
    .C1(n1834), .B1(n1825), .A1(n50), .D0(scancode_sync_4), .C0(n49), 
    .B0(scancode_sync_5), .A0(n50), .F0(n1825), 
    .F1(\Tone_Gen/Pulse_Length/n4_adj_15 ));
  Read_key_L_Constantkey_SLICE_93 \Read_key/L_Constantkey/SLICE_93 ( .C1(n49), 
    .B1(scancode_sync_4), .A1(n50), .D0(scancode_sync_0), .C0(n4056), .B0(n49), 
    .A0(scancode_sync_1), .F0(n830), .F1(n4056));
  SLICE_94 SLICE_94( .D1(scancode_sync_1), .C1(n49), .B1(n4067), .A1(n4068), 
    .C0(n49), .B0(scancode_sync_6), .A0(n50), .F0(n4068), 
    .F1(\Tone_Gen/Pulse_Length/n3668 ));
  SLICE_95 SLICE_95( .C1(n49), .B1(scancode_sync_7), .A1(n50), .D0(n4054), 
    .C0(n44), .B0(n49), .A0(scancode_sync_2), .F0(pulselenght_0), .F1(n4054));
  Read_key_L_Constantkey_SLICE_96 \Read_key/L_Constantkey/SLICE_96 ( .C1(n49), 
    .B1(scancode_sync_5), .A1(n50), .D0(n4068), .C0(n4067), .B0(n49), 
    .A0(scancode_sync_2), .F0(n3691), .F1(n4067));
  Tone_Gen_Pulse_Length_SLICE_97 \Tone_Gen/Pulse_Length/SLICE_97 ( .D1(n4067), 
    .C1(n4059), .B1(n4056), .A1(n4060), .D0(\Tone_Gen/Pulse_Length/n73 ), 
    .C0(n4), .B0(n4067), .A0(\Tone_Gen/Pulse_Length/n70 ), .F0(\Tone_Gen/n76 ), 
    .F1(\Tone_Gen/Pulse_Length/n70 ));
  Tone_Gen_Pulse_Length_SLICE_98 \Tone_Gen/Pulse_Length/SLICE_98 ( .D1(n4068), 
    .C1(n4060), .B1(n4059), .A1(n4056), .D0(n4_adj_57), .C0(n1832), .B0(n4068), 
    .A0(\Tone_Gen/Pulse_Length/n72 ), .F0(\Tone_Gen/Pulse_Length/n85 ), 
    .F1(\Tone_Gen/Pulse_Length/n72 ));
  Tone_Gen_Clock_Generator_SLICE_99 \Tone_Gen/Clock_Generator/SLICE_99 ( 
    .D1(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .C1(\Tone_Gen/Clock_Generator/n1846 ), 
    .B1(\Tone_Gen/Clock_Generator/n3680 ), .A1(\Tone_Gen/Clock_Generator/n5 ), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .B0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .A0(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .F0(\Tone_Gen/Clock_Generator/n5 ), .F1(\Tone_Gen/Clock_Generator/n877 ));
  Tone_Gen_Clock_Generator_SLICE_100 \Tone_Gen/Clock_Generator/SLICE_100 ( 
    .C1(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .D0(\Tone_Gen/Clock_Generator/n3662 ), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_1 ), 
    .B0(\Tone_Gen/Clock_Generator/n709 ), 
    .A0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .F0(\Tone_Gen/Clock_Generator/n687 ), .F1(\Tone_Gen/Clock_Generator/n709 ));
  Read_key_L_Showkey_SLICE_101 \Read_key/L_Showkey/SLICE_101 ( 
    .D1(\Read_key/L_Showkey/n40 ), .C1(\Read_key/L_Showkey/n44 ), 
    .B1(\Read_key/L_Showkey/cnt_17 ), .A1(\Read_key/L_Showkey/n39 ), 
    .D0(\Read_key/L_Showkey/cnt_27 ), .C0(\Read_key/L_Showkey/cnt_25 ), 
    .B0(\Read_key/L_Showkey/cnt_28 ), .A0(\Read_key/L_Showkey/cnt_22 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3696 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n40 ), .Q0(\Read_key/L_Showkey/dig1store_0 ), 
    .F1(\Read_key/L_Showkey/n7_adj_47 ));
  Read_key_L_Showkey_SLICE_102 \Read_key/L_Showkey/SLICE_102 ( 
    .D1(\Read_key/L_Showkey/n24 ), .C1(\Read_key/L_Showkey/n36 ), 
    .B1(\Read_key/L_Showkey/n42 ), .A1(\Read_key/L_Showkey/cnt_21 ), 
    .D0(\Read_key/L_Showkey/cnt_7 ), .C0(\Read_key/L_Showkey/n28 ), 
    .B0(\Read_key/L_Showkey/n38 ), .A0(\Read_key/L_Showkey/cnt_10 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3702 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n42 ), .Q0(\Read_key/L_Showkey/dig1store_1 ), 
    .F1(\Read_key/L_Showkey/n44 ));
  Read_key_L_Showkey_SLICE_103 \Read_key/L_Showkey/SLICE_103 ( 
    .C1(\Read_key/L_Showkey/n368 ), .B1(\Read_key/L_Showkey/cnt_0 ), 
    .A1(\Read_key/L_Showkey/n4111 ), .D0(\Read_key/L_Showkey/cnt_2 ), 
    .C0(\Read_key/L_Showkey/cnt_1 ), .B0(\Read_key/L_Showkey/n3665 ), 
    .A0(\Read_key/L_Showkey/cnt_3 ), .F0(\Read_key/L_Showkey/n4111 ), 
    .F1(\Read_key/L_Showkey/n4113 ));
  Read_key_L_Showkey_SLICE_104 \Read_key/L_Showkey/SLICE_104 ( 
    .C1(\Read_key/L_Showkey/cnt_0 ), .B1(\Read_key/L_Showkey/cnt_2 ), 
    .A1(\Read_key/L_Showkey/cnt_1 ), .D0(\Read_key/L_Showkey/n6 ), 
    .C0(\Read_key/L_Showkey/n3665 ), .B0(\Read_key/L_Showkey/n4051 ), 
    .A0(reset_c), .F0(\Read_key/L_Showkey/n134 ), 
    .F1(\Read_key/L_Showkey/n4051 ));
  Read_key_L_Showkey_SLICE_105 \Read_key/L_Showkey/SLICE_105 ( 
    .C1(\Read_key/L_Showkey/cnt_3 ), .B1(\Read_key/L_Showkey/n3665 ), 
    .A1(\Read_key/L_Showkey/cnt_2 ), .D0(\Read_key/L_Showkey/n6_adj_48 ), 
    .C0(\Read_key/L_Showkey/cnt_16 ), .B0(\Read_key/L_Showkey/n7_adj_47 ), 
    .A0(\Read_key/L_Showkey/cnt_15 ), .F0(\Read_key/L_Showkey/n3665 ), 
    .F1(\Read_key/L_Showkey/n122 ));
  Read_key_L_Showkey_SLICE_106 \Read_key/L_Showkey/SLICE_106 ( 
    .B1(\Read_key/L_Showkey/n3665 ), .A1(\Read_key/L_Showkey/cnt_2 ), 
    .D0(\Read_key/L_Showkey/cnt_1 ), .C0(\Read_key/L_Showkey/n368 ), 
    .B0(\Read_key/L_Showkey/n4035 ), .A0(\Read_key/L_Showkey/cnt_0 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3690 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n3718 ), .Q0(\Read_key/L_Showkey/dig1store_6 ), 
    .F1(\Read_key/L_Showkey/n4035 ));
  Read_key_L_Showkey_SLICE_107 \Read_key/L_Showkey/SLICE_107 ( 
    .B1(\Read_key/L_Showkey/cnt_1 ), .A1(\Read_key/L_Showkey/cnt_3 ), 
    .D0(\Read_key/L_Showkey/n3765 ), .C0(\Read_key/L_Showkey/n4035 ), 
    .B0(\Read_key/L_Showkey/cnt_0 ), .A0(\Read_key/L_Showkey/n368 ), 
    .F0(\Read_key/L_Showkey/n2072 ), .F1(\Read_key/L_Showkey/n3765 ));
  Read_key_L_Showkey_SLICE_108 \Read_key/L_Showkey/SLICE_108 ( 
    .C1(\Read_key/L_Showkey/cnt_0 ), .B1(\Read_key/L_Showkey/n3665 ), 
    .A1(\Read_key/L_Showkey/cnt_2 ), .D0(\Read_key/L_Showkey/cnt_1 ), 
    .C0(\Read_key/L_Showkey/n6_adj_49 ), .B0(\Read_key/L_Showkey/n368 ), 
    .A0(\Read_key/L_Showkey/cnt_3 ), .F0(\Read_key/L_Showkey/n87 ), 
    .F1(\Read_key/L_Showkey/n6_adj_49 ));
  SLICE_109 SLICE_109( .D1(n3691), .C1(n4059), 
    .B1(\Tone_Gen/Pulse_Length/n55_adj_11 ), .A1(n49_adj_55), .D0(n4056), 
    .C0(scancode_sync_3), .B0(n49), .A0(scancode_sync_1), .F0(n49_adj_55), 
    .F1(\Tone_Gen/n58 ));
  SLICE_110 SLICE_110( .D1(\Tone_Gen/Pulse_Length/n85 ), .C1(n4053), 
    .B1(n4066), .A1(\Tone_Gen/Pulse_Length/n78 ), .C0(scancode_sync_5), 
    .B0(n49), .A0(scancode_sync_6), .F0(n4053), .F1(\Tone_Gen/n91 ));
  SLICE_111 SLICE_111( .D1(n4066), .C1(\Tone_Gen/n65 ), .B1(\Tone_Gen/n60 ), 
    .A1(n4054), .B0(n49), .A0(scancode_sync_2), .F0(n4066), 
    .F1(\Tone_Gen/Audio_Pulse/pulselenght_3 ));
  SLICE_112 SLICE_112( .D1(n4067), .C1(n4060), .B1(n4059), .A1(n4065), 
    .D0(n3905), .C0(n49), .B0(scancode_sync_4), .A0(n50), .F0(n4_adj_57), 
    .F1(n3905));
  SLICE_113 SLICE_113( .D1(\Tone_Gen/n37 ), .C1(\Tone_Gen/Audio_Pulse/n3732 ), 
    .B1(n4049), .A1(\Tone_Gen/Audio_Pulse/n3745 ), .C0(scancode_sync_2), 
    .B0(n49), .A0(scancode_sync_6), .F0(n4049), 
    .F1(\Tone_Gen/Audio_Pulse/n3757 ));
  SLICE_114 SLICE_114( .D1(n4060), .C1(n4059), .B1(n4056), .A1(n4067), 
    .B0(n49), .A0(scancode_sync_0), .F0(n4059), 
    .F1(\Tone_Gen/Pulse_Length/n50_adj_31 ));
  SLICE_115 SLICE_115( .D1(\Tone_Gen/Pulse_Length/n45 ), .C1(n4060), 
    .B1(\Tone_Gen/Pulse_Length/n48_adj_19 ), .A1(n4065), .D0(n4054), .C0(n51), 
    .B0(n49), .A0(scancode_sync_2), .F0(pulselenght_8), .F1(n51));
  SLICE_116 SLICE_116( .D1(scancode_sync_0), 
    .C1(\Tone_Gen/Pulse_Length/n3668 ), .B1(n4056), .A1(n4060), .B0(n49), 
    .A0(scancode_sync_3), .F0(n4060), .F1(\Tone_Gen/n60 ));
  SLICE_117 SLICE_117( .D1(n3691), .C1(n4059), 
    .B1(\Tone_Gen/Pulse_Length/n38 ), .A1(n4042), .D0(n50), 
    .C0(scancode_sync_4), .B0(n49), .A0(scancode_sync_3), 
    .M1(\Read_key/L_Constantkey/byteread_sync1 ), .M0(\Read_key/C_byte_read ), 
    .CLK(clk_c), .F0(n4042), .Q0(\Read_key/L_Constantkey/byteread_sync1 ), 
    .F1(\Tone_Gen/n36 ), .Q1(\Read_key/L_Constantkey/byteread_sync2 ));
  SLICE_118 SLICE_118( .D1(\Tone_Gen/Pulse_Length/n46 ), 
    .C1(\Tone_Gen/Pulse_Length/n4_adj_15 ), .B1(n4068), .A1(n4065), .D0(n4054), 
    .C0(n49_adj_56), .B0(n49), .A0(scancode_sync_2), .F0(pulselenght_9), 
    .F1(n49_adj_56));
  SLICE_119 SLICE_119( .D1(\Tone_Gen/Audio_Pulse/n4036 ), .C1(n4052), 
    .B1(\Tone_Gen/Audio_Pulse/n3772 ), .A1(\Tone_Gen/Audio_Pulse/n3721 ), 
    .C0(scancode_sync_7), .B0(n49), .A0(scancode_sync_2), .F0(n4052), 
    .F1(\Tone_Gen/Audio_Pulse/n3676 ));
  SLICE_120 SLICE_120( .D1(n56), .C1(scancode_sync_3), 
    .B1(\Tone_Gen/Pulse_Length/n65_adj_28 ), 
    .A1(\Tone_Gen/Pulse_Length/n3668 ), .D0(scancode_sync_0), .C0(n4056), 
    .B0(n49), .A0(scancode_sync_2), .F0(n56), .F1(\Tone_Gen/n62_adj_40 ));
  SLICE_121 SLICE_121( .D1(\Tone_Gen/Pulse_Length/n10 ), .C1(n4068), 
    .B1(n1832), .A1(n4060), .D0(scancode_sync_1), .C0(n49), 
    .B0(scancode_sync_5), .A0(n50), .F0(n1832), 
    .F1(\Tone_Gen/Pulse_Length/n38_adj_24 ));
  SLICE_122 SLICE_122( .D1(\Tone_Gen/Pulse_Length/n4178 ), 
    .C1(\Tone_Gen/Pulse_Length/n38_adj_24 ), .B1(n4065), .A1(n4059), .B0(n49), 
    .A0(scancode_sync_1), .F0(n4065), .F1(n44));
  SLICE_123 SLICE_123( .D1(\Tone_Gen/Pulse_Length/n4_adj_17 ), .C1(n4059), 
    .B1(n6), .A1(n4048), .C0(scancode_sync_3), .B0(n49), .A0(scancode_sync_1), 
    .F0(n4048), .F1(\Tone_Gen/Pulse_Length/n46 ));
  Tone_Gen_Pulse_Length_SLICE_124 \Tone_Gen/Pulse_Length/SLICE_124 ( 
    .D1(\Tone_Gen/Pulse_Length/n53 ), .C1(n49), .B1(scancode_sync_3), 
    .A1(scancode_sync_1), .D0(n4059), .C0(n4068), .B0(n1825), .A0(n4056), 
    .F0(\Tone_Gen/Pulse_Length/n53 ), .F1(\Tone_Gen/Pulse_Length/n839 ));
  Tone_Gen_SLICE_125 \Tone_Gen/SLICE_125 ( .D1(\Tone_Gen/n62 ), .C1(n4066), 
    .B1(\Tone_Gen/n65 ), .A1(\Tone_Gen/n60 ), .D0(\Tone_Gen/Pulse_Length/n62 ), 
    .C0(\Tone_Gen/Pulse_Length/n4348 ), .B0(n4068), .A0(n4065), 
    .F0(\Tone_Gen/n65 ), .F1(\Tone_Gen/Audio_Pulse/n861 ));
  Tone_Gen_Pulse_Length_SLICE_126 \Tone_Gen/Pulse_Length/SLICE_126 ( 
    .D1(n4067), .C1(\Tone_Gen/Pulse_Length/n49_adj_10 ), 
    .B1(\Tone_Gen/Pulse_Length/n55 ), .A1(n4068), .D0(n4059), .C0(n4060), 
    .B0(n4056), .A0(n4065), .F0(\Tone_Gen/Pulse_Length/n55 ), 
    .F1(\Tone_Gen/Pulse_Length/n60 ));
  Tone_Gen_SLICE_127 \Tone_Gen/SLICE_127 ( .D1(n4066), .C1(\Tone_Gen/n62 ), 
    .B1(\Tone_Gen/n60 ), .A1(n4054), .D0(\Tone_Gen/Pulse_Length/n53_adj_8 ), 
    .C0(n4059), .B0(\Tone_Gen/Pulse_Length/n60 ), .A0(n4060), 
    .F0(\Tone_Gen/n62 ), .F1(\Tone_Gen/Audio_Pulse/pulselenght_4 ));
  Tone_Gen_SLICE_128 \Tone_Gen/SLICE_128 ( .D1(\Tone_Gen/n58 ), 
    .C1(\Tone_Gen/n76 ), .B1(\Tone_Gen/Audio_Pulse/n861 ), .A1(\Tone_Gen/n56 ), 
    .D0(\Tone_Gen/Pulse_Length/n53_adj_14 ), .C0(n4053), .B0(n4066), 
    .A0(\Tone_Gen/Pulse_Length/n50_adj_13 ), .F0(\Tone_Gen/n56 ), 
    .F1(\Tone_Gen/Audio_Pulse/n3295 ));
  Tone_Gen_Pulse_Length_SLICE_129 \Tone_Gen/Pulse_Length/SLICE_129 ( 
    .B1(scancode_sync_4), .A1(scancode_sync_5), .D0(scancode_sync_3), .C0(n49), 
    .B0(n4062), .A0(n50), .F0(n3904), .F1(n4062));
  Tone_Gen_Clock_Generator_SLICE_130 \Tone_Gen/Clock_Generator/SLICE_130 ( 
    .C1(\Tone_Gen/Clock_Generator/n870 ), .B1(\Tone_Gen/Clock_Generator/n871 ), 
    .A1(\Tone_Gen/Clock_Generator/n872 ), .C0(\Tone_Gen/Clock_Generator/n5 ), 
    .B0(reset_c), .A0(\Tone_Gen/clk_divider ), 
    .F0(\Tone_Gen/Clock_Generator/n1528 ), .F1(\Tone_Gen/clk_divider ));
  Tone_Gen_Clock_Generator_SLICE_131 \Tone_Gen/Clock_Generator/SLICE_131 ( 
    .D1(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .C1(\Tone_Gen/Clock_Generator/n4038 ), 
    .B1(\Tone_Gen/Clock_Generator/n4039 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_5 ), 
    .D0(\Tone_Gen/Clock_Generator/counter_4 ), 
    .C0(\Tone_Gen/Clock_Generator/n3737 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_6 ), 
    .A0(\Tone_Gen/Clock_Generator/freqentie_2 ), 
    .F0(\Tone_Gen/Clock_Generator/n3680 ), 
    .F1(\Tone_Gen/Clock_Generator/n3737 ));
  Tone_Gen_Clock_Generator_SLICE_132 \Tone_Gen/Clock_Generator/SLICE_132 ( 
    .B1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .D0(\Tone_Gen/Clock_Generator/counter_3 ), 
    .C0(\Tone_Gen/Clock_Generator/freqentie_0 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_2 ), 
    .A0(\Tone_Gen/Clock_Generator/n4061 ), 
    .F0(\Tone_Gen/Clock_Generator/n701 ), 
    .F1(\Tone_Gen/Clock_Generator/n4061 ));
  Tone_Gen_Clock_Generator_SLICE_133 \Tone_Gen/Clock_Generator/SLICE_133 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_2 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .B1(\Tone_Gen/Clock_Generator/n4057 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_4 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_6 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_5 ), 
    .F0(\Tone_Gen/Clock_Generator/n4057 ), 
    .F1(\Tone_Gen/Clock_Generator/n3662 ));
  Tone_Gen_SLICE_134 \Tone_Gen/SLICE_134 ( 
    .D1(\Tone_Gen/Audio_Pulse/pulselenght_6 ), .C1(\Tone_Gen/pulselenght_12 ), 
    .B1(pulselenght_0), .A1(\Tone_Gen/Audio_Pulse/pulselenght_7 ), 
    .D0(\Tone_Gen/n37 ), .C0(n4054), .B0(n4068), .A0(n4066), 
    .F0(\Tone_Gen/pulselenght_12 ), .F1(\Tone_Gen/Audio_Pulse/n3772 ));
  Tone_Gen_Audio_Pulse_SLICE_135 \Tone_Gen/Audio_Pulse/SLICE_135 ( .D1(n44), 
    .C1(n4052), .B1(n51), .A1(n49_adj_56), .D0(\Tone_Gen/Audio_Pulse/n3757 ), 
    .C0(\Tone_Gen/Audio_Pulse/n3751 ), .B0(n4054), 
    .A0(\Tone_Gen/Audio_Pulse/n9 ), .F0(\Tone_Gen/Audio_Pulse/n118 ), 
    .F1(\Tone_Gen/Audio_Pulse/n3751 ));
  Read_key_L_Showkey_SLICE_136 \Read_key/L_Showkey/SLICE_136 ( 
    .D1(\Read_key/L_Showkey/cnt_0 ), .C1(\Read_key/L_Showkey/n368 ), 
    .B1(\Read_key/L_Showkey/cnt_2 ), .A1(\Read_key/L_Showkey/cnt_1 ), 
    .D0(\Read_key/L_Showkey/cnt_2 ), .C0(\Read_key/L_Showkey/cnt_1 ), 
    .B0(\Read_key/L_Showkey/n368 ), .A0(\Read_key/L_Showkey/cnt_0 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3698 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n3699 ), .Q0(\Read_key/L_Showkey/dig1store_3 ), 
    .F1(\Read_key/L_Showkey/n3696 ));
  Read_key_L_Showkey_SLICE_137 \Read_key/L_Showkey/SLICE_137 ( 
    .D1(\Read_key/L_Showkey/cnt_0 ), .C1(\Read_key/L_Showkey/n368 ), 
    .B1(\Read_key/L_Showkey/cnt_2 ), .A1(\Read_key/L_Showkey/cnt_1 ), 
    .D0(\Read_key/L_Showkey/cnt_2 ), .C0(\Read_key/L_Showkey/cnt_1 ), 
    .B0(\Read_key/L_Showkey/n368 ), .A0(\Read_key/L_Showkey/cnt_0 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3689 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n3698 ), .Q0(\Read_key/L_Showkey/dig1store_4 ), 
    .F1(\Read_key/L_Showkey/n3701 ));
  Read_key_L_Showkey_SLICE_138 \Read_key/L_Showkey/SLICE_138 ( 
    .D1(\Read_key/L_Showkey/cnt_0 ), .C1(\Read_key/L_Showkey/n368 ), 
    .B1(\Read_key/L_Showkey/cnt_2 ), .A1(\Read_key/L_Showkey/cnt_1 ), 
    .D0(\Read_key/L_Showkey/cnt_2 ), .C0(\Read_key/L_Showkey/cnt_1 ), 
    .B0(\Read_key/L_Showkey/n368 ), .A0(\Read_key/L_Showkey/cnt_0 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3699 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n3690 ), .Q0(\Read_key/L_Showkey/dig1store_5 ), 
    .F1(\Read_key/L_Showkey/n3702 ));
  Read_key_L_Constantkey_SLICE_139 \Read_key/L_Constantkey/SLICE_139 ( 
    .D1(scancode_sync_1), .C1(scancode_sync_3), .B1(n49), .A1(scancode_sync_2), 
    .D0(scancode_sync_1), .C0(scancode_sync_3), .B0(n49), .A0(scancode_sync_2), 
    .F0(n52), .F1(n3687));
  SLICE_140 SLICE_140( .D1(n49), .C1(scancode_sync_0), .B1(scancode_sync_3), 
    .A1(scancode_sync_1), .D0(scancode_sync_6), .C0(scancode_sync_3), .B0(n49), 
    .A0(scancode_sync_0), .F0(n1834), .F1(\Tone_Gen/Pulse_Length/n4043 ));
  Read_key_L_Constantkey_SLICE_141 \Read_key/L_Constantkey/SLICE_141 ( 
    .D1(scancode_sync_1), .C1(n4068), .B1(n49), .A1(scancode_sync_2), 
    .D0(scancode_sync_1), .C0(n4059), .B0(scancode_sync_2), .A0(n4068), 
    .F0(\Read_key/L_Constantkey/n3683 ), .F1(n4));
  Read_key_L_Constantkey_SLICE_142 \Read_key/L_Constantkey/SLICE_142 ( 
    .D1(scancode_sync_0), .C1(n4056), .B1(n49), .A1(scancode_sync_1), 
    .D0(n4068), .C0(n4056), .B0(n49), .A0(scancode_sync_0), .F0(n1861), 
    .F1(n6_adj_54));
  Tone_Gen_Pulse_Length_SLICE_143 \Tone_Gen/Pulse_Length/SLICE_143 ( 
    .D1(n4067), .C1(n4059), .B1(n4060), .A1(n4056), .D0(n4067), .C0(n4068), 
    .B0(n4059), .A0(n4056), .F0(\Tone_Gen/Pulse_Length/n45 ), 
    .F1(\Tone_Gen/Pulse_Length/n43 ));
  Tone_Gen_Pulse_Length_SLICE_144 \Tone_Gen/Pulse_Length/SLICE_144 ( .D1(n50), 
    .C1(n49), .B1(scancode_sync_4), .A1(scancode_sync_5), .C0(scancode_sync_5), 
    .B0(scancode_sync_4), .A0(n49), .F0(\Tone_Gen/Pulse_Length/n4_adj_17 ), 
    .F1(\Tone_Gen/Pulse_Length/n10 ));
  Tone_Gen_Clock_Generator_SLICE_145 \Tone_Gen/Clock_Generator/SLICE_145 ( 
    .D1(\Tone_Gen/Clock_Generator/counter_2 ), 
    .C1(\Tone_Gen/Clock_Generator/counter_3 ), 
    .B1(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A1(\Tone_Gen/Clock_Generator/counter_0 ), 
    .C0(\Tone_Gen/Clock_Generator/counter_2 ), 
    .B0(\Tone_Gen/Clock_Generator/counter_1 ), 
    .A0(\Tone_Gen/Clock_Generator/counter_0 ), 
    .F0(\Tone_Gen/Clock_Generator/n4050 ), 
    .F1(\Tone_Gen/Clock_Generator/n4039 ));
  Tone_Gen_Audio_Pulse_SLICE_146 \Tone_Gen/Audio_Pulse/SLICE_146 ( 
    .D1(\Tone_Gen/n52 ), .C1(n49), .B1(scancode_sync_7), .A1(n50), 
    .D0(\Tone_Gen/n36 ), .C0(n49), .B0(scancode_sync_7), .A0(n50), 
    .F0(\Tone_Gen/Audio_Pulse/pulselenght_10 ), 
    .F1(\Tone_Gen/Audio_Pulse/pulselenght_6 ));
  Tone_Gen_Audio_Pulse_SLICE_147 \Tone_Gen/Audio_Pulse/SLICE_147 ( 
    .D1(\Tone_Gen/n62_adj_40 ), .C1(n49), .B1(scancode_sync_7), .A1(n50), 
    .D0(\Tone_Gen/n91 ), .C0(n49), .B0(scancode_sync_7), .A0(n50), 
    .F0(\Tone_Gen/Audio_Pulse/pulselenght_11 ), 
    .F1(\Tone_Gen/Audio_Pulse/pulselenght_7 ));
  Tone_Gen_Audio_Pulse_SLICE_148 \Tone_Gen/Audio_Pulse/SLICE_148 ( 
    .D1(\Tone_Gen/n76 ), .C1(n49), .B1(scancode_sync_7), .A1(n50), 
    .D0(\Tone_Gen/n58 ), .C0(n49), .B0(scancode_sync_7), .A0(n50), 
    .F0(\Tone_Gen/Audio_Pulse/pulselenght_2 ), 
    .F1(\Tone_Gen/Audio_Pulse/pulselenght_1 ));
  SLICE_149 SLICE_149( .D1(n49), .C1(scancode_sync_6), .B1(scancode_sync_3), 
    .A1(scancode_sync_4), .C0(scancode_sync_4), .B0(n49), .A0(scancode_sync_0), 
    .F0(n4045), .F1(\Tone_Gen/Pulse_Length/n4176 ));
  SLICE_150 SLICE_150( .D1(scancode_sync_0), .C1(scancode_sync_2), 
    .B1(scancode_sync_3), .A1(scancode_sync_1), .C0(scancode_sync_0), .B0(n49), 
    .A0(scancode_sync_1), .F0(n4044), .F1(n10));
  SLICE_151 SLICE_151( .B1(scancode_sync_3), .A1(scancode_sync_1), 
    .D0(scancode_sync_3), .C0(n4067), .B0(n49), .A0(scancode_sync_1), .F0(n6), 
    .F1(n4063));
  Tone_Gen_Audio_Pulse_SLICE_152 \Tone_Gen/Audio_Pulse/SLICE_152 ( 
    .C1(\Tone_Gen/n52 ), .B1(\Tone_Gen/n36 ), .A1(\Tone_Gen/n91 ), .D0(n4054), 
    .C0(\Tone_Gen/Audio_Pulse/n3295 ), .B0(\Tone_Gen/n36 ), 
    .A0(\Tone_Gen/n91 ), .F0(\Tone_Gen/Audio_Pulse/n3721 ), 
    .F1(\Tone_Gen/Audio_Pulse/n3745 ));
  Read_key_L_Showkey_SLICE_153 \Read_key/L_Showkey/SLICE_153 ( 
    .B1(\Read_key/L_Showkey/n368 ), .A1(\Read_key/L_Showkey/cnt_1 ), 
    .B0(\Read_key/L_Showkey/n368 ), .A0(\Read_key/L_Showkey/cnt_3 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n3701 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n6 ), .Q0(\Read_key/L_Showkey/dig1store_2 ), 
    .F1(\Read_key/L_Showkey/n4031 ));
  Tone_Gen_Pulse_Length_SLICE_154 \Tone_Gen/Pulse_Length/SLICE_154 ( 
    .D1(\Tone_Gen/Pulse_Length/n59_adj_26 ), .C1(n4068), 
    .B1(\Tone_Gen/Pulse_Length/n839 ), .A1(n4066), .D0(n1825), .C0(n4068), 
    .B0(n4065), .A0(n4067), .F0(\Tone_Gen/Pulse_Length/n53_adj_8 ), 
    .F1(\Tone_Gen/Pulse_Length/n65_adj_28 ));
  Tone_Gen_Pulse_Length_SLICE_155 \Tone_Gen/Pulse_Length/SLICE_155 ( 
    .D1(\Tone_Gen/Pulse_Length/n3944 ), .C1(\Tone_Gen/Pulse_Length/n3703 ), 
    .B1(n4059), .A1(n4065), .D0(n4059), .C0(scancode_sync_1), .B0(n4060), 
    .A0(n4056), .F0(\Tone_Gen/Pulse_Length/n49_adj_10 ), 
    .F1(\Tone_Gen/Pulse_Length/n78 ));
  Tone_Gen_SLICE_156 \Tone_Gen/SLICE_156 ( .D1(\Tone_Gen/n56 ), .C1(n49), 
    .B1(scancode_sync_7), .A1(n50), .C0(scancode_sync_0), .B0(scancode_sync_3), 
    .A0(n49), .M0(\Tone_Gen/Clock_Generator/n160 ), 
    .LSR(\Tone_Gen/Clock_Generator/n195 ), .CLK(clk_c), 
    .F0(\Tone_Gen/Pulse_Length/n4055 ), .Q0(\Tone_Gen/Clock_Generator/n872 ), 
    .F1(\Tone_Gen/Audio_Pulse/pulselenght_5 ));
  Tone_Gen_Clock_Generator_SLICE_157 \Tone_Gen/Clock_Generator/SLICE_157 ( 
    .C1(\Tone_Gen/Clock_Generator/n5 ), .B1(\Tone_Gen/clk_divider ), 
    .A1(reset_c), .C0(n333), .B0(reset_c), .A0(flag), 
    .F0(\Tone_Gen/Clock_Generator/n864 ), .F1(\Tone_Gen/Clock_Generator/n195 ));
  Read_key_L_Showkey_SLICE_158 \Read_key/L_Showkey/SLICE_158 ( 
    .D1(\Read_key/L_Showkey/cnt_18 ), .C1(\Read_key/L_Showkey/cnt_5 ), 
    .B1(\Read_key/L_Showkey/cnt_6 ), .A1(\Read_key/L_Showkey/cnt_26 ), 
    .B0(\Read_key/L_Showkey/cnt_14 ), .A0(\Read_key/L_Showkey/cnt_13 ), 
    .F0(\Read_key/L_Showkey/n28 ), .F1(\Read_key/L_Showkey/n38 ));
  Read_key_L_Showkey_SLICE_159 \Read_key/L_Showkey/SLICE_159 ( 
    .D1(\Read_key/L_Showkey/cnt_24 ), .C1(\Read_key/L_Showkey/cnt_9 ), 
    .B1(\Read_key/L_Showkey/cnt_8 ), .A1(\Read_key/L_Showkey/cnt_19 ), 
    .B0(\Read_key/L_Showkey/cnt_12 ), .A0(\Read_key/L_Showkey/cnt_29 ), 
    .M0(kbdata_c), .CE(\Read_key/L_Showkey/n4113 ), .CLK(kbclock_c), 
    .F0(\Read_key/L_Showkey/n24 ), .Q0(\Read_key/L_Showkey/dig1store_7 ), 
    .F1(\Read_key/L_Showkey/n36 ));
  reset reset_I( .PADDI(reset_c), .reset(reset));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  audio_l audio_l_I( .PADDO(audio_l_c), .audio_l(audio_l));
  audio_r audio_r_I( .PADDO(audio_l_c), .audio_r(audio_r));
  kbclock kbclock_I( .PADDI(kbclock_c), .kbclock(kbclock));
  kbdata kbdata_I( .PADDI(kbdata_c), .kbdata(kbdata));
  GSR_INST GSR_INST( .GSRNET(reset_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module Read_key_L_Showkey_SLICE_0 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_12 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module Read_key_SLICE_1 ( input A1, A0, M1, M0, CE, CLK, FCI, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  ccu2 \Read_key/L_Showkey/add_2821_10 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module Read_key_L_Showkey_SLICE_2 ( input D0, C0, B0, A0, DI0, LSR, CLK, FCI, 
    output F0, Q0 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i31 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  ccu20002 \Read_key/L_Showkey/cnt_230_add_4_33 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vmuxregsre0001 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf700;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_3 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i30 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i29 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_31 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf700;
  defparam inst1.INIT1 = 16'hf700;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_4 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i28 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i27 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_29 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_5 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_8 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_6 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i26 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i25 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_27 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_7 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i24 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i23 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_25 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_8 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_9 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \Read_key/L_Showkey/add_2821_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_10 ( input A0, FCI, output F1 );
  wire   GNDI;

  ccu20005 \Read_key/L_Showkey/add_2821_32 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf555;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_11 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i22 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_23 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_12 ( input D1, C1, B1, A1, output F1, FCO );
  wire   GNDI;

  ccu20006 \Read_key/L_Showkey/cnt_230_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'ha655;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_13 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_9 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_14 ( input A1, B0, A0, output FCO );
  wire   GNDI;

  ccu20007 \Read_key/L_Showkey/add_2821_2 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h1000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_15 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_30 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_16 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_28 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_17 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_26 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_18 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i20 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_21 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_19 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i18 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_19 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_20 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_24 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_21 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i16 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i15 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_17 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_22 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_22 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_23 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_20 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_24 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i14 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_15 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_25 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \Read_key/L_Showkey/cnt_230_add_4_3 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfb00;
  defparam inst1.INIT1 = 16'hf700;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Read_key_L_Showkey_SLICE_26 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_13 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_27 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_5 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_28 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_18 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_29 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_16 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_30 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_7 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_31 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, LSR, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, CLK_NOTIN, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0001 \Read_key/L_Showkey/cnt_230__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(LSR_dly), .Q(Q0));
  ccu20003 \Read_key/L_Showkey/cnt_230_add_4_11 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_32 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \Read_key/L_Showkey/add_2821_14 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Audio_Pulse_SLICE_33 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Tone_Gen_Audio_Pulse_SLICE_34 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module Tone_Gen_Audio_Pulse_SLICE_35 ( input A1, DI1, LSR, CLK, output F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20010 \Tone_Gen/Audio_Pulse/cnt_229_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module Tone_Gen_Audio_Pulse_SLICE_36 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i12 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_37 ( input D0, C0, B0, A0, M1, M0, CE, CLK, FCI, output Q0, F1, 
    Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  ccu20012 \Tone_Gen/Audio_Pulse/equal_8_13 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (D0 => F1) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module vmuxregsre0011 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'hFFFF;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_38 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  ccu20013 \Tone_Gen/Audio_Pulse/equal_8_12 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module Tone_Gen_Audio_Pulse_SLICE_39 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i10 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module Tone_Gen_Audio_Pulse_SLICE_40 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_41 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  ccu20013 \Tone_Gen/Audio_Pulse/equal_8_10 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module SLICE_42 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre0011 \Read_key/L_Showkey/scancode_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  ccu20014 \Tone_Gen/Audio_Pulse/equal_8_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9000;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module Tone_Gen_Audio_Pulse_SLICE_43 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/cnt_229__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20009 \Tone_Gen/Audio_Pulse/cnt_229_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_44 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, CLK_NOTIN, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut4 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_48 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40015 \Read_key/L_Showkey/i1_2_lut_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Showkey/byte_read_54 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_50 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40016 \Read_key/L_Constantkey/i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40017 \Read_key/L_Constantkey/i325_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Read_key/L_Constantkey/current_s_FSM_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_51 ( input C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, DI0_dly, CLK_dly;

  lut40018 \Read_key/L_Showkey/i1_2_lut_rep_89_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40019 \Read_key/L_Showkey/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Read_key/L_Showkey/cnt_230__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_60 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40020 \Tone_Gen/Clock_Generator/i2832_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40021 \Tone_Gen/Clock_Generator/i2830_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_61 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40022 \Tone_Gen/Clock_Generator/i2846_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40023 \Tone_Gen/Clock_Generator/i2839_2_lut_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h78F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_62 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40022 \Tone_Gen/Clock_Generator/i2860_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40022 \Tone_Gen/Clock_Generator/i2853_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module Tone_Gen_Clock_Generator_SLICE_63 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40024 \Tone_Gen/Clock_Generator/i299_2_lut_rep_93_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40025 \Tone_Gen/Clock_Generator/i2867_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0001 \Tone_Gen/Clock_Generator/counter_228__i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_64 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40026 \Tone_Gen/Clock_Generator/mux_197_i2_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40027 \Tone_Gen/Clock_Generator/freqentie_0__bdd_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0011 \Tone_Gen/Clock_Generator/freqentie_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0011 \Tone_Gen/Clock_Generator/freqentie_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4968) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_65 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40028 \Read_key/L_Constantkey/i197_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \Tone_Gen/Clock_Generator/mux_197_i3/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0011 \Tone_Gen/Clock_Generator/freqentie_i0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A28) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_66 ( input DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40030 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \Tone_Gen/Clock_Generator/i534 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0031 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module Tone_Gen_Clock_Generator_SLICE_67 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40024 \Tone_Gen/Clock_Generator/i2856_2_lut_rep_92_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40032 \Tone_Gen/Clock_Generator/Mux_56_i7_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0033 \Tone_Gen/Clock_Generator/temp_clk_69_535_536_set ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0033 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module Tone_Gen_Audio_Pulse_SLICE_69 ( input B0, A0, DI0, LSR, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40020 \Tone_Gen/Audio_Pulse/i20_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0001 \Tone_Gen/Audio_Pulse/audio_tmp_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_70 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40034 \Read_key/L_Constantkey/i1_2_lut_4_lut_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 \Read_key/L_Constantkey/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Tone_Gen/Clock_Generator/flag_63 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_71 ( input C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40036 \Read_key/L_Constantkey/i313_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40037 \Read_key/L_Constantkey/i323_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0038 \Read_key/L_Constantkey/current_s_FSM_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \Read_key/L_Constantkey/current_s_FSM_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0038 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_73 ( input B0, A0, M1, M0, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40039 \Tone_Gen/Audio_Pulse/i1_2_lut_rep_91 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_74 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40039 \Tone_Gen/Audio_Pulse/i3328_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40039 \Read_key/L_Showkey/i1_2_lut_adj_52 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Read_key_SLICE_75 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40040 \Read_key/L_Showkey/i3383_3_lut_rep_88_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40041 \Read_key/L_Showkey/i16_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \Read_key/L_Constantkey/scancode_sync_i0_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i3462_SLICE_76 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/SLICE_76_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/GATE_H0 
         ;

  lut40042 \Tone_Gen/Pulse_Length/i3462/SLICE_76_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/SLICE_76_K1_H1 )
    );
  lut40043 \Tone_Gen/Pulse_Length/i3462/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/GATE_H0 )
    );
  selmux2 \Tone_Gen/Pulse_Length/i3462/SLICE_76_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/GATE_H0 )
    , 
    .D1(\Tone_Gen/Pulse_Length/i3462/SLICE_76/Tone_Gen/Pulse_Length/i3462/SLICE_76_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module Tone_Gen_Pulse_Length_i82_SLICE_77 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/SLICE_77_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/GATE_H0 ;

  lut40044 \Tone_Gen/Pulse_Length/i82/SLICE_77_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/SLICE_77_K1_H1 )
    );
  lut40045 \Tone_Gen/Pulse_Length/i82/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i82/SLICE_77_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i82/SLICE_77/Tone_Gen/Pulse_Length/i82/SLICE_77_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i75_SLICE_78 ( input C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/SLICE_78_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/GATE_H0 ;

  lut40046 \Tone_Gen/Pulse_Length/i75/SLICE_78_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/SLICE_78_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \Tone_Gen/Pulse_Length/i75/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i75/SLICE_78_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i75/SLICE_78/Tone_Gen/Pulse_Length/i75/SLICE_78_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i77_SLICE_79 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/SLICE_79_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/GATE_H0 ;

  lut40048 \Tone_Gen/Pulse_Length/i77/SLICE_79_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/SLICE_79_K1_H1 )
    );
  lut40044 \Tone_Gen/Pulse_Length/i77/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i77/SLICE_79_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i77/SLICE_79/Tone_Gen/Pulse_Length/i77/SLICE_79_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1032) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i101_SLICE_80 ( input C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   GNDI, 
         \Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/SLICE_80_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/GATE_H0 ;

  lut40049 \Tone_Gen/Pulse_Length/i101/SLICE_80_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/SLICE_80_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \Tone_Gen/Pulse_Length/i101/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i101/SLICE_80_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i101/SLICE_80/Tone_Gen/Pulse_Length/i101/SLICE_80_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4E4E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i75_adj_26_SLICE_81 ( input D1, C1, B1, A1, D0, 
    C0, B0, A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/GATE_H0 
         ;

  lut40045 \Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81_K1_H1 )
    );
  lut40050 \Tone_Gen/Pulse_Length/i75_adj_26/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/GATE_H0 )
    );
  selmux2 \Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/GATE_H0 )
    , 
    .D1(\Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81/Tone_Gen/Pulse_Length/i75_adj_26/SLICE_81_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i3607_SLICE_82 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/SLICE_82_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/GATE_H0 
         ;

  lut40051 \Tone_Gen/Pulse_Length/i3607/SLICE_82_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/SLICE_82_K1_H1 )
    );
  lut40045 \Tone_Gen/Pulse_Length/i3607/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/GATE_H0 )
    );
  selmux2 \Tone_Gen/Pulse_Length/i3607/SLICE_82_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/GATE_H0 )
    , 
    .D1(\Tone_Gen/Pulse_Length/i3607/SLICE_82/Tone_Gen/Pulse_Length/i3607/SLICE_82_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0057) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i83_SLICE_83 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/SLICE_83_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/GATE_H0 ;

  lut40052 \Tone_Gen/Pulse_Length/i83/SLICE_83_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/SLICE_83_K1_H1 )
    );
  lut40053 \Tone_Gen/Pulse_Length/i83/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i83/SLICE_83_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i83/SLICE_83/Tone_Gen/Pulse_Length/i83/SLICE_83_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i70_SLICE_84 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/SLICE_84_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/GATE_H0 ;

  lut40050 \Tone_Gen/Pulse_Length/i70/SLICE_84_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/SLICE_84_K1_H1 )
    );
  lut40054 \Tone_Gen/Pulse_Length/i70/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i70/SLICE_84_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i70/SLICE_84/Tone_Gen/Pulse_Length/i70/SLICE_84_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5172) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i84_SLICE_85 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/SLICE_85_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/GATE_H0 ;

  lut40055 \Tone_Gen/Pulse_Length/i84/SLICE_85_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/SLICE_85_K1_H1 )
    );
  lut40056 \Tone_Gen/Pulse_Length/i84/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i84/SLICE_85_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i84/SLICE_85/Tone_Gen/Pulse_Length/i84/SLICE_85_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i3518_SLICE_86 ( input D1, C1, B1, A1, B0, A0, M0, 
    output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/SLICE_86_K1_H1 
         , GNDI, 
         \Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/GATE_H0 
         ;

  lut40057 \Tone_Gen/Pulse_Length/i3518/SLICE_86_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/SLICE_86_K1_H1 )
    );
  lut40058 \Tone_Gen/Pulse_Length/i3518/GATE ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), 
    .Z(\Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \Tone_Gen/Pulse_Length/i3518/SLICE_86_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/GATE_H0 )
    , 
    .D1(\Tone_Gen/Pulse_Length/i3518/SLICE_86/Tone_Gen/Pulse_Length/i3518/SLICE_86_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0211) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i50_SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/SLICE_87_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/GATE_H0 ;

  lut40059 \Tone_Gen/Pulse_Length/i50/SLICE_87_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/SLICE_87_K1_H1 )
    );
  lut40060 \Tone_Gen/Pulse_Length/i50/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i50/SLICE_87_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i50/SLICE_87/Tone_Gen/Pulse_Length/i50/SLICE_87_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5700) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4E4A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i49_SLICE_88 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/SLICE_88_K1_H1 
         , 
         \Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/GATE_H0 ;

  lut40045 \Tone_Gen/Pulse_Length/i49/SLICE_88_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/SLICE_88_K1_H1 )
    );
  lut40061 \Tone_Gen/Pulse_Length/i49/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/GATE_H0 ));
  selmux2 \Tone_Gen/Pulse_Length/i49/SLICE_88_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/GATE_H0 ), 
    .D1(\Tone_Gen/Pulse_Length/i49/SLICE_88/Tone_Gen/Pulse_Length/i49/SLICE_88_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_i3425_SLICE_89 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/SLICE_89_K1_H1 
         , GNDI, 
         \Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/GATE_H0 
         ;

  lut40062 \Tone_Gen/Pulse_Length/i3425/SLICE_89_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/SLICE_89_K1_H1 )
    );
  lut40063 \Tone_Gen/Pulse_Length/i3425/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \Tone_Gen/Pulse_Length/i3425/SLICE_89_K0K1MUX ( 
    .D0(\Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/GATE_H0 )
    , 
    .D1(\Tone_Gen/Pulse_Length/i3425/SLICE_89/Tone_Gen/Pulse_Length/i3425/SLICE_89_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_Mux_56_i6_SLICE_90 ( input D1, C1, B1, A1, D0, 
    C0, B0, A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90_K1_H1 
         , 
         \Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/GATE_H0 
         ;

  lut40064 \Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), 
    .Z(\Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90_K1_H1 )
    );
  lut40065 \Tone_Gen/Clock_Generator/Mux_56_i6/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/GATE_H0 )
    );
  selmux2 \Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90_K0K1MUX ( 
    .D0(\Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/GATE_H0 )
    , 
    .D1(\Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90/Tone_Gen/Clock_Generator/Mux_56_i6/SLICE_90_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0036) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h01FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_i51_SLICE_91 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/SLICE_91_K1_H1 
         , 
         \Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/GATE_H0 
         ;

  lut40066 \Tone_Gen/Clock_Generator/i51/SLICE_91_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/SLICE_91_K1_H1 )
    );
  lut40067 \Tone_Gen/Clock_Generator/i51/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/GATE_H0 )
    );
  selmux2 \Tone_Gen/Clock_Generator/i51/SLICE_91_K0K1MUX ( 
    .D0(\Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/GATE_H0 )
    , 
    .D1(\Tone_Gen/Clock_Generator/i51/SLICE_91/Tone_Gen/Clock_Generator/i51/SLICE_91_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0015) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0701) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_SLICE_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40068 \Tone_Gen/Pulse_Length/i1_4_lut_adj_18 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40069 \Tone_Gen/Pulse_Length/i331_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5C5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_93 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40070 \Read_key/L_Constantkey/i48_3_lut_rep_111 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \Read_key/L_Constantkey/i1_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5C5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_94 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40072 \Tone_Gen/Pulse_Length/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40070 \Read_key/L_Constantkey/i52_3_lut_rep_123 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_95 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40070 \Tone_Gen/Audio_Pulse/i54_3_lut_rep_109 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 \Read_key/L_Constantkey/i2_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_96 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40070 \Read_key/L_Constantkey/i50_3_lut_rep_122 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 \Read_key/L_Constantkey/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Pulse_Length_SLICE_97 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40074 \Tone_Gen/Pulse_Length/i100_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40017 \Tone_Gen/Pulse_Length/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6960) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_SLICE_98 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40075 \Tone_Gen/Pulse_Length/i107_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40076 \Tone_Gen/Pulse_Length/i1_4_lut_adj_21 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4340) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_99 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40077 \Tone_Gen/Clock_Generator/i545_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40018 \Tone_Gen/Clock_Generator/i2_3_lut_adj_9 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_100 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40078 \Tone_Gen/Clock_Generator/Mux_56_i2_3_lut_4_lut_3_lut ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40079 \Tone_Gen/Clock_Generator/Mux_56_i3_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8E8E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_101 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40041 \Read_key/L_Showkey/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40041 \Read_key/L_Showkey/i17_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_102 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40041 \Read_key/L_Showkey/i21_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40041 \Read_key/L_Showkey/i19_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_103 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40080 \Read_key/L_Showkey/n4112_bdd_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40081 \Read_key/L_Showkey/cnt_3__bdd_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_104 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40082 \Read_key/L_Showkey/i1_2_lut_rep_106_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40083 \Read_key/L_Showkey/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_105 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40084 \Read_key/L_Showkey/i1_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \Read_key/L_Showkey/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_106 ( input B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40039 \Read_key/L_Showkey/i1_2_lut_rep_90 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40085 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_50 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_107 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40020 \Read_key/L_Showkey/i3378_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40086 \Read_key/L_Showkey/i1_4_lut_adj_51 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5557) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_108 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40084 \Read_key/L_Showkey/i2_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40087 \Read_key/L_Showkey/i1_4_lut_adj_53 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCC4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_109 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40088 \Tone_Gen/Pulse_Length/i83_4_lut_adj_15 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40089 \Read_key/L_Constantkey/i84_3_lut_4_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4840) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_110 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40037 \Tone_Gen/Pulse_Length/i1_4_lut_adj_19 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40028 \Read_key/L_Constantkey/i1_2_lut_rep_108_4_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_111 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40090 \Tone_Gen/Audio_Pulse/i1_4_lut_adj_1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40091 \Read_key/L_Constantkey/i1491_2_lut_rep_121 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_112 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40092 \Tone_Gen/Pulse_Length/n82_bdd_4_lut_3431 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40093 \Read_key/L_Constantkey/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7406) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_113 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40094 \Tone_Gen/Audio_Pulse/i3352_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40034 \Read_key/L_Constantkey/i1_2_lut_rep_104_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_114 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40095 \Tone_Gen/Pulse_Length/i1_4_lut_adj_38 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40091 \Read_key/L_Constantkey/i1489_2_lut_rep_114 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_115 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40096 \Tone_Gen/Pulse_Length/i72_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40073 \Read_key/L_Constantkey/i2_2_lut_3_lut_4_lut_adj_41 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_116 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40097 \Tone_Gen/Pulse_Length/i2_3_lut_4_lut_adj_36 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40091 \Read_key/L_Constantkey/i1492_2_lut_rep_115 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_117 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, CLK_NOTIN, M1_dly, CLK_dly, M0_dly;

  lut40096 \Tone_Gen/Pulse_Length/i50_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40098 \Read_key/L_Constantkey/i110_2_lut_rep_97_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Constantkey/byteread_sync2_31 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));
  vmuxregsre \Read_key/L_Constantkey/byteread_sync1_30 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h487B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_118 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40099 \Tone_Gen/Pulse_Length/i1_4_lut_adj_17 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40073 \Read_key/L_Constantkey/i2_2_lut_3_lut_4_lut_adj_42 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_119 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40100 \Tone_Gen/Audio_Pulse/i3386_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40028 \Read_key/L_Constantkey/i1_2_lut_rep_107_4_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_120 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40101 \Tone_Gen/Pulse_Length/i1_4_lut_adj_34 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40102 \Read_key/L_Constantkey/i83_3_lut_4_lut_3_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_121 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40103 \Tone_Gen/Pulse_Length/i60_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40069 \Read_key/L_Constantkey/i1501_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1A10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_122 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40099 \Tone_Gen/Pulse_Length/i1_4_lut_adj_27 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40091 \Read_key/L_Constantkey/i1490_2_lut_rep_120 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_123 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40088 \Tone_Gen/Pulse_Length/i63_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40028 \Read_key/L_Constantkey/i1_2_lut_rep_103_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Pulse_Length_SLICE_124 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40104 \Tone_Gen/Pulse_Length/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40105 \Tone_Gen/Pulse_Length/i85_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_SLICE_125 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40079 \Tone_Gen/Audio_Pulse/i525_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40099 \Tone_Gen/Pulse_Length/i1_4_lut_adj_11 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Pulse_Length_SLICE_126 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40090 \Tone_Gen/Pulse_Length/i1_4_lut_adj_13 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40106 \Tone_Gen/Pulse_Length/n82_bdd_4_lut_3413 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_SLICE_127 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40090 \Tone_Gen/Audio_Pulse/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40107 \Tone_Gen/Pulse_Length/i1_4_lut_adj_12 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_SLICE_128 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40041 \Tone_Gen/Audio_Pulse/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40037 \Tone_Gen/Pulse_Length/i1_4_lut_adj_16 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Pulse_Length_SLICE_129 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40091 \Tone_Gen/Pulse_Length/i1578_2_lut_rep_117 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40108 \Tone_Gen/Pulse_Length/n50_bdd_4_lut_3421 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h35C5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_130 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40109 \Tone_Gen/Clock_Generator/i537_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40110 \Tone_Gen/Clock_Generator/i3397_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3737) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_131 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40111 \Tone_Gen/Clock_Generator/i3332_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40112 \Tone_Gen/Clock_Generator/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_132 ( input B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40091 \Tone_Gen/Clock_Generator/i297_2_lut_rep_116 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40113 \Tone_Gen/Clock_Generator/Mux_56_i4_3_lut_4_lut_3_lut_4_lut ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_133 ( input D1, C1, B1, A1, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40041 \Tone_Gen/Clock_Generator/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40039 \Tone_Gen/Clock_Generator/i1_2_lut_rep_112 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_SLICE_134 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40040 \Tone_Gen/Audio_Pulse/i3385_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut4 \Tone_Gen/Clock_Generator/i2_3_lut_4_lut_adj_10 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Audio_Pulse_SLICE_135 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40114 \Tone_Gen/Audio_Pulse/i3346_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40115 \Tone_Gen/Audio_Pulse/i1_4_lut_adj_8 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAEAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_136 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40116 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_56 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40117 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_137 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut4 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_55 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40116 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_46 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_138 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40112 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_54 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40072 \Read_key/L_Showkey/i1_2_lut_3_lut_4_lut_adj_47 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Read_key_L_Constantkey_SLICE_139 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40035 \Read_key/L_Constantkey/i1_2_lut_3_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40118 \Read_key/L_Constantkey/i79_3_lut_4_lut_4_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0488) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_140 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40015 \Tone_Gen/Pulse_Length/i1591_3_lut_rep_98_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40119 \Read_key/L_Constantkey/i1503_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_141 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40120 \Read_key/L_Constantkey/i1_2_lut_3_lut_4_lut_4_lut_adj_43 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40121 \Read_key/L_Constantkey/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0104) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Constantkey_SLICE_142 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40073 \Read_key/L_Constantkey/i2_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40122 \Read_key/L_Constantkey/i1529_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF78) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_SLICE_143 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40123 \Tone_Gen/Pulse_Length/i74_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40124 \Tone_Gen/Pulse_Length/i71_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0DA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_SLICE_144 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40125 \Tone_Gen/Pulse_Length/i339_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40126 \Tone_Gen/Pulse_Length/i1_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h808F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2828) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_145 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40127 \Tone_Gen/Clock_Generator/i295_2_lut_rep_94_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40128 \Tone_Gen/Clock_Generator/i300_2_lut_rep_105_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Audio_Pulse_SLICE_146 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_7 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Audio_Pulse_SLICE_147 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_6 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Tone_Gen_Audio_Pulse_SLICE_148 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_5 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_3 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_149 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40130 \Tone_Gen/Pulse_Length/scancode_sync_4__bdd_4_lut_3530 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 \Read_key/L_Constantkey/i1_2_lut_rep_100_4_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_150 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40041 \Tone_Gen/Pulse_Length/i4_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40034 \Read_key/L_Constantkey/i1_2_lut_rep_99_3_lut_3_lut ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_151 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40039 \Tone_Gen/Pulse_Length/i1527_2_lut_rep_118 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40131 \Read_key/L_Constantkey/i2_3_lut_4_lut_4_lut_adj_45 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7470) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Audio_Pulse_SLICE_152 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40018 \Tone_Gen/Audio_Pulse/i3340_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40132 \Tone_Gen/Audio_Pulse/i1_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Read_key_L_Showkey_SLICE_153 ( input B1, A1, B0, A0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40091 \Read_key/L_Showkey/i180_2_lut_rep_86 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 \Read_key/L_Showkey/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module Tone_Gen_Pulse_Length_SLICE_154 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40133 \Tone_Gen/Pulse_Length/i1_4_lut_adj_37 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40134 \Tone_Gen/Pulse_Length/i83_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h02C2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Pulse_Length_SLICE_155 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40037 \Tone_Gen/Pulse_Length/i1_4_lut_adj_20 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40135 \Tone_Gen/Pulse_Length/i1_4_lut_adj_14 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_SLICE_156 ( input D1, C1, B1, A1, C0, B0, A0, M0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40129 \Tone_Gen/Audio_Pulse/i1_2_lut_4_lut_adj_4 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40136 \Tone_Gen/Pulse_Length/i1584_3_lut_rep_110 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0011 \Tone_Gen/Clock_Generator/temp_clk_69_535_536_reset ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module Tone_Gen_Clock_Generator_SLICE_157 ( input C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40028 \Tone_Gen/Clock_Generator/i2_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \Tone_Gen/Clock_Generator/i3388_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_158 ( input D1, C1, B1, A1, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40041 \Read_key/L_Showkey/i15_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40039 \Read_key/L_Showkey/i5_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module Read_key_L_Showkey_SLICE_159 ( input D1, C1, B1, A1, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CLK_NOTIN, M0_dly, CLK_dly, CE_dly;

  lut40041 \Read_key/L_Showkey/i13_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40039 \Read_key/L_Showkey/i1_2_lut_adj_49 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \Read_key/L_Showkey/dig1store_i0_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_NOTIN), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CLK_INVERTERIN( .I(CLK_dly), .Z(CLK_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
    $setuphold (negedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (negedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
  endspecify

endmodule

module reset ( output PADDI, input reset );

  xo2iobuf reset_pad( .Z(PADDI), .PAD(reset));

  specify
    (reset => PADDI) = (0:0:0,0:0:0);
    $width (posedge reset, 0:0:0);
    $width (negedge reset, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module clk ( output PADDI, input clk );

  xo2iobuf0137 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module xo2iobuf0137 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module audio_l ( input PADDO, output audio_l );
  wire   GNDI;

  xo2iobuf0138 audio_l_pad( .I(PADDO), .T(GNDI), .PAD(audio_l));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => audio_l) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0138 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module audio_r ( input PADDO, output audio_r );
  wire   GNDI;

  xo2iobuf0138 audio_r_pad( .I(PADDO), .T(GNDI), .PAD(audio_r));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => audio_r) = (0:0:0,0:0:0);
  endspecify

endmodule

module kbclock ( output PADDI, input kbclock );

  xo2iobuf0139 kbclock_pad( .Z(PADDI), .PAD(kbclock));

  specify
    (kbclock => PADDI) = (0:0:0,0:0:0);
    $width (posedge kbclock, 0:0:0);
    $width (negedge kbclock, 0:0:0);
  endspecify

endmodule

module xo2iobuf0139 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module kbdata ( output PADDI, input kbdata );

  xo2iobuf0139 kbdata_pad( .Z(PADDI), .PAD(kbdata));

  specify
    (kbdata => PADDI) = (0:0:0,0:0:0);
    $width (posedge kbdata, 0:0:0);
    $width (negedge kbdata, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
